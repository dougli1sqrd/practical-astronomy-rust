var searchIndex = JSON.parse('{\
"num":{"doc":"A collection of numeric types and traits for Rust.","t":[3,6,3,8,8,8,8,8,3,8,8,16,8,8,8,8,8,6,8,8,8,8,8,5,10,10,11,5,10,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,10,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,10,11,11,11,11,11,10,10,11,11,11,10,11,11,11,10,11,11,11,5,10,11,11,11,5,10,11,11,11,11,11,11,11,11,0,11,11,10,11,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,12,10,0,10,11,11,11,11,11,11,10,11,11,10,11,10,11,10,11,11,10,11,10,11,10,11,10,11,11,11,11,11,11,10,11,10,10,10,11,11,11,0,11,10,11,11,11,10,10,11,10,10,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,0,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,5,5,5,5,0,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,5,10,10,11,10,11,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,0,10,11,11,11,11,11,11,11,11,11,11,10,10,5,10,11,11,11,3,3,13,13,3,13,4,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,3,6,6,3,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,5,5,10,6,3,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,8,8,10,13,8,10,10,10,10,10,10,10,10,10,8,8,4,8,16,8,13,10,10,11,10,11,10,8,8,8,8,8,8,8,8,8,8,16,16,16,10,3,8,8,8,10,8,8,8,8,8,11,8,8,8,8,8,8,8,8,8,5,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,0,0,5,10,10,10,10,10,10,10,5,10,10,10,10,10,5,5,5,10,11,10,10,10,10,10,11,10,10,10,0,10,11,11,11,10,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,10,11,11,10,0,10,0,10,11,11,10,10,10,10,10,10,11,10,10,10,10,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,10,0,0,5,10,10,10,10,0,10,10,11,10,10,10,10,10,10,10,10,11,11,0,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,10,10,11,11,11,11,11,11,10,10,10,10,10,10,10,10,5,10,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["BigInt","BigRational","BigUint","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedSub","Complex","Float","FromPrimitive","FromStrRadixErr","Integer","Num","NumCast","One","PrimInt","Rational","Saturating","Signed","ToPrimitive","Unsigned","Zero","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","arg","as_","asin","asin","asinh","asinh","assign_from_slice","assign_from_slice","atan","atan","atan2","atanh","atanh","average_ceil","average_ceil","average_floor","average_floor","bigint","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","ceil","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_mul","checked_pow","checked_sub","checked_sub","checked_sub","checked_sub","clamp","classify","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","complex","conj","copysign","cos","cos","cosh","cosh","count_ones","count_zeros","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_floor","div_floor","div_floor","div_mod_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","div_rem","divides","divides","divides","epsilon","eq","eq","eq","exp","exp","exp2","exp_m1","expf","extended_gcd","extended_gcd_lcm","fdiv","finv","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_isize","from_isize","from_le","from_polar","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_usize","from_usize","gcd","gcd","gcd","gcd_lcm","hash","hash","hash","hypot","i","im","infinity","integer","integer_decode","into","into","into","inv","inv","inv","is_even","is_even","is_even","is_finite","is_finite","is_infinite","is_infinite","is_multiple_of","is_multiple_of","is_multiple_of","is_nan","is_nan","is_negative","is_negative","is_normal","is_normal","is_odd","is_odd","is_odd","is_one","is_one","is_one","is_one","is_positive","is_positive","is_sign_negative","is_sign_positive","is_zero","is_zero","is_zero","is_zero","iter","l1_norm","lcm","lcm","lcm","leading_ones","leading_zeros","ln","ln","ln_1p","log","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mod_floor","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nan","neg","neg","neg","neg","neg","neg","neg_infinity","neg_zero","new","new","new","next_multiple_of","norm","norm_sqr","not","not","nth_root","nth_root","nth_root","nth_root","one","one","one","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powf","powf","powi","powi","powu","prev_multiple_of","product","product","product","product","range","range_inclusive","range_step","range_step_inclusive","rational","re","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_sub","scale","set_one","set_one","set_one","set_one","set_zero","set_zero","set_zero","set_zero","shl","shl","shl","shl","shl_assign","shl_assign","shr","shr","shr","shr","shr_assign","shr_assign","sign","signed_shl","signed_shr","signum","signum","signum","signum","sin","sin","sin_cos","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","swap_bytes","tan","tan","tanh","tanh","to_be","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_degrees","to_f32","to_f32","to_f32","to_f32","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_le","to_owned","to_owned","to_owned","to_polar","to_radians","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u16","to_u16","to_u32","to_u32","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","trailing_ones","trailing_zeros","traits","trunc","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unscale","unsigned_shl","unsigned_shr","zero","zero","zero","zero","zero","BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","description","eq","eq","fmt","fmt","fmt","from","from","hash","into","into","mul","neg","partial_cmp","provide","to_bigint","to_biguint","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","Complex","Complex32","Complex64","ParseComplexError","borrow","borrow_mut","description","eq","fmt","fmt","from","im","into","provide","re","to_string","try_from","try_into","type_id","Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y","Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","end_bound","end_bound","end_bound","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","start_bound","start_bound","start_bound","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Output","Pow","checked_pow","pow","pow","BigRational","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","denom","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","provide","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_integer","to_owned","to_owned","to_string","to_string","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero","AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","E","Empty","Euclid","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acosh","as_","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","cbrt","ceil","checked_add","checked_div","checked_div_euclid","checked_mul","checked_neg","checked_pow","checked_rem","checked_rem_euclid","checked_shl","checked_shr","checked_sub","clamp","clamp_max","clamp_min","classify","copysign","cos","cosh","count_ones","count_zeros","div_euclid","epsilon","exp","exp2","exp_m1","float","floor","fmt","fmt","fmt","fract","from","from","from","from_be","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hypot","identities","infinity","int","integer_decode","into","into","inv","is_finite","is_infinite","is_nan","is_negative","is_normal","is_one","is_positive","is_sign_negative","is_sign_positive","is_zero","kind","leading_ones","leading_zeros","ln","ln_1p","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mul_add","mul_add","mul_add_assign","nan","neg_infinity","neg_zero","one","one","ops","pow","pow","pow","pow","powf","powi","real","recip","rem_euclid","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","signum","sin","sin_cos","sinh","sqrt","swap_bytes","tan","tanh","to_be","to_degrees","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_radians","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_ones","trailing_zeros","trunc","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::bigint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::complex","","","","","","","","","","","","","","","","","","","num::integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::pow","","","","","num::rationalnum::traitsnum::traits::bounds","","","","","","","num::traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::identities","","","","","","","","","","num::traits::int","","","","","","","","","","","","","","","","","","","","num::traits::ops","","","","","","","num::traits::ops::checked","","","","","","","","","","","","","","","","num::traits::ops::euclid","","","","","","num::traits::ops::inv","","","num::traits::ops::mul_add","","","","","num::traits::ops::overflowing","","","","","","num::traits::ops::saturating","","","","","","","","","num::traits::ops::wrapping","","","","","","","","","","","","num::traits::pow","","","","","num::traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::sign","","","","","","","","",""],"d":["A big signed integer type.","Alias for arbitrary precision rationals.","A big unsigned integer type.","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs subtraction that returns <code>None</code> instead of wrapping …","A complex number in Cartesian form.","Generic trait for floating point numbers","A generic trait for converting a number to a value.","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","An interface for casting between machine scalars.","Defines a multiplicative identity element for <code>Self</code>.","Generic trait for primitive integers.","Alias for a <code>Ratio</code> of machine-sized integers.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Useful functions for signed numbers (i.e. numbers that can …","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","","Computes the arccosine of a number. Return value is in …","Computes the principal value of the inverse cosine of <code>self</code>.","Inverse hyperbolic cosine function.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate the principal Arg of self.","","Computes the arcsine of a number. Return value is in …","Computes the principal value of the inverse sine of <code>self</code>.","Inverse hyperbolic sine function.","Computes the principal value of inverse hyperbolic sine of …","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Computes the arctangent of a number. Return value is in …","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic tangent …","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Computes the principal value of the cube root of <code>self</code>.","","Returns the truncated principal cube root of <code>self</code> – see …","","Returns the truncated principal cube root of <code>self</code> – see …","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","","","","Divides two numbers, checking for underflow, overflow and …","","","","Multiplies two numbers, checking for underflow or …","","","","Raises a value to the power of exp, returning <code>None</code> if an …","Subtracts two numbers, checking for underflow. If …","","","","A value bounded by a minimum and a maximum","Returns the floating point category of the number. If only …","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Computes the cosine of <code>self</code>.","Hyperbolic cosine function.","Computes the hyperbolic cosine of <code>self</code>.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ceiled integer division.","Floored integer division.","","","Simultaneous floored integer division and modulus. Returns …","","","Simultaneous truncated integer division and modulus. …","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Returns epsilon, a small positive value.","","","","Returns <code>e^(self)</code>, (the exponential function).","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Raises a floating point number to the complex power <code>self</code>.","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","Returns the largest integer less than or equal to a number.","","","","","","","","","","","","","","","","","","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Convert an integer from big endian to the target’s …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Converts a <code>f32</code> to return an optional value of this type. …","","Converts a <code>f64</code> to return an optional value of this type. …","","","","Converts an <code>i128</code> to return an optional value of this type. …","","","","Converts an <code>i16</code> to return an optional value of this type. …","","Converts an <code>i32</code> to return an optional value of this type. …","","Converts an <code>i64</code> to return an optional value of this type. …","","","","Converts an <code>i8</code> to return an optional value of this type. …","","Converts an <code>isize</code> to return an optional value of this …","","Convert an integer from little endian to the target’s …","Convert a polar representation into a complex number.","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","Convert from a string and radix (typically <code>2..=36</code>).","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","Converts an <code>u128</code> to return an optional value of this type. …","","","","Converts an <code>u16</code> to return an optional value of this type. …","","Converts an <code>u32</code> to return an optional value of this type. …","","Converts an <code>u64</code> to return an optional value of this type. …","","","","Converts an <code>u8</code> to return an optional value of this type. …","","Converts a <code>usize</code> to return an optional value of this type. …","","Greatest Common Divisor (GCD).","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Calculate the length of the hypotenuse of a right-angle …","Returns imaginary unit","Imaginary portion of the complex number","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>1/self</code>","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","Checks if the given complex number is infinite","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Checks if the given complex number is NaN","Returns true if the number is negative and false if the …","","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","Returns <code>true</code> if the number is odd.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","","","","Returns true if the number is positive and false if the …","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Lowest Common Multiple (LCM).","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Computes the principal value of natural logarithm of <code>self</code>.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Floored integer modulo, satisfying:","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NaN</code> value.","","","","","","","Returns the negative infinite value.","Returns <code>-0.0</code>.","Create a new Complex","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","Rounds up to nearest multiple of argument.","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raise a number to a floating point power.","Raises <code>self</code> to a floating point power.","Raise a number to an integer power.","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","Rounds down to nearest multiple of argument.","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the range [start, stop] by <code>step</code>. …","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Multiplies <code>self</code> by the scalar <code>t</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","","","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","","","","","","","","","","","","","","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","","Computes the sine of a number (in radians).","Computes the sine of <code>self</code>.","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Computes the hyperbolic sine of <code>self</code>.","Take the square root of a number.","Computes the principal value of the square root of <code>self</code>.","Returns the truncated principal square root of <code>self</code> – …","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Computes the tangent of <code>self</code>.","Hyperbolic tangent function.","Computes the hyperbolic tangent of <code>self</code>.","Convert <code>self</code> to big endian from the target’s endianness.","","","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","","","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","","","","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","","Convert <code>self</code> to little endian from the target’s …","","","","Convert to polar form (r, theta), such that …","Converts degrees to radians.","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","","","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","","","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","","Return the integer part of a number.","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","","","A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Negate Sign value.","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","Converts the value of <code>self</code> to a <code>BigUint</code>.","","","","","","","","","","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","A complex number in Cartesian form.","","","","","","","","","","Returns the argument unchanged.","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","","Real portion of the complex number","","","","","Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","","","An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Alias for arbitrary precision rationals.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","Rounds towards minus infinity.","","Renders as <code>numer/denom</code>. If denom=1, renders as numer.","","","Returns the fractional part of a number, with division …","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>. Fails if <code>denom</code> is zero.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","Rounds towards zero.","","","","","","","","A generic interface for casting between machine scalars …","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Return Euler’s number.","","","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, …","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","An interface for casting between machine scalars.","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedes’ constant <code>π</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for <code>Num</code> references which implement numeric …","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Useful functions for signed numbers (i.e. numbers that can …","Return the full circle constant <code>τ</code>.","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Convert a value to another, using the <code>as</code> operator.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Performs euclid division that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Finds the euclid remainder of dividing two numbers, …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Calculates Euclidean division, the matching method for …","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","","Returns the largest integer less than or equal to a number.","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","Returns the argument unchanged.","Returns the argument unchanged.","Convert an integer from big endian to the target’s …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Convert from a string and radix (typically <code>2..=36</code>).","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Calculate the length of the hypotenuse of a right-angle …","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the multiplicative inverse of <code>self</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns true if the number is negative and false if the …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Returns <code>self</code> to the power <code>rhs</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Convert <code>self</code> to big endian from the target’s endianness.","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","Converts degrees to radians.","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Return the integer part of a number.","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,48,49,1,0,48,49,1,48,2,48,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,2,2,48,2,48,2,1,15,48,2,48,48,2,1,15,1,15,0,1,1,1,1,15,15,15,15,1,1,15,15,1,1,1,1,15,15,15,15,1,1,15,15,1,15,1,1,1,1,15,15,15,15,1,1,15,15,2,1,15,2,1,15,0,0,48,2,1,1,15,15,48,50,1,1,15,51,1,1,15,52,1,1,15,0,53,1,1,15,0,48,2,1,15,2,1,15,1,15,0,2,48,48,2,48,2,54,54,2,1,15,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,55,55,1,15,55,1,15,55,1,15,55,1,15,48,2,1,15,48,2,48,48,2,55,55,2,2,48,2,2,2,2,2,2,2,2,1,1,1,1,1,1,15,15,15,15,15,15,48,56,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,54,1,1,15,1,15,57,2,57,2,1,15,57,2,1,15,57,2,57,2,57,2,1,15,57,2,57,2,54,2,1,15,1,15,1,1,1,15,2,1,15,47,2,1,15,57,2,1,15,57,2,57,2,57,2,1,15,57,2,57,2,55,1,15,55,2,1,15,48,2,2,48,0,48,2,1,15,2,2,2,55,1,15,48,2,48,2,55,1,15,48,2,49,1,48,2,55,1,15,58,2,1,15,49,1,48,48,59,2,1,15,0,2,55,1,15,54,54,48,2,48,48,2,48,48,48,60,48,48,48,60,48,55,1,15,1,15,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,48,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,48,2,2,1,1,15,15,48,48,2,1,15,55,2,2,1,1,1,1,15,15,0,58,2,1,15,1,15,1,15,0,0,54,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,48,2,48,2,2,55,2,2,1,15,0,0,0,0,0,2,48,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,54,54,54,48,61,61,2,58,2,1,15,59,2,1,15,1,1,15,15,1,15,1,1,15,15,1,15,1,54,54,0,48,49,1,48,2,48,48,2,48,2,1,1,15,15,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,2,2,1,15,54,48,2,48,2,54,1,15,1,1,15,1,15,1,15,48,62,2,1,15,62,2,1,15,62,2,1,15,62,2,62,2,62,2,1,15,62,2,62,2,54,2,1,15,2,48,1,15,1,15,1,1,1,15,2,1,15,62,2,1,15,62,2,62,2,1,15,62,2,1,15,62,2,62,2,54,54,0,48,2,1,15,2,1,15,2,1,15,2,54,54,0,59,2,1,15,0,0,16,16,0,16,0,0,0,16,28,16,28,16,28,16,28,16,28,16,28,16,28,28,16,28,16,16,28,16,16,16,28,63,64,16,28,28,16,28,16,28,16,28,0,0,0,0,65,0,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,38,38,38,38,38,38,38,2,38,38,2,38,38,38,38,0,0,0,0,0,0,66,0,66,0,39,21,39,21,0,67,21,21,0,55,0,55,0,55,0,55,55,21,55,55,21,39,21,0,55,21,0,55,39,21,39,55,55,55,0,55,0,55,0,39,39,55,0,67,55,0,67,21,39,21,39,21,39,21,21,21,0,0,0,0,0,0,31,32,33,34,40,41,31,32,33,34,40,41,31,32,33,34,40,41,31,32,33,34,40,41,31,32,40,31,32,33,34,40,41,31,32,33,34,40,41,31,32,33,34,40,41,31,32,33,34,40,41,31,32,0,0,0,0,0,0,31,32,40,41,31,32,40,31,32,33,34,40,41,31,32,33,34,40,41,31,32,33,34,40,41,31,32,33,34,40,41,68,0,0,0,68,0,0,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,43,44,43,43,43,43,43,43,44,43,44,43,43,44,43,43,43,43,43,43,43,43,43,43,43,43,43,44,43,43,43,44,44,43,43,43,43,44,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,43,44,43,43,44,43,44,43,44,43,0,0,0,0,0,0,0,0,0,0,0,69,45,0,69,69,69,69,69,69,69,69,69,0,0,0,0,47,0,45,69,69,69,69,69,69,0,0,0,0,0,0,0,0,0,0,70,71,68,69,0,0,0,0,69,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,48,49,0,48,49,48,48,65,48,48,48,48,48,45,46,45,46,0,0,0,48,48,50,51,72,52,73,0,74,72,75,76,53,0,0,0,48,48,48,48,54,54,77,48,48,48,48,0,48,45,46,46,48,56,45,46,54,57,57,57,57,57,57,57,57,54,47,57,57,57,57,57,57,48,0,48,0,48,45,46,70,48,48,48,49,48,58,49,48,48,59,46,54,54,48,48,48,48,48,48,60,48,48,48,60,48,48,71,78,48,48,48,0,58,0,0,0,54,68,48,48,0,48,77,54,54,54,48,61,79,80,61,81,58,59,0,54,54,0,48,49,48,48,48,48,54,48,48,54,48,62,62,62,62,62,62,62,62,54,48,46,62,62,62,62,62,62,54,54,48,45,46,45,46,45,46,54,54,82,83,84,85,86,87,0,59,0,0,0,60,88,60,89,0,0,0,0,65,0,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,62,62,62,62,62,62,62,62,62,62,62,62,62,62,69,69,69,69,69,69,69,69,69,69,0,0,0,69,69,69,69,69,69,69,69,69,48,90,48,48,48,48,48,48,48,48,48,48,90,90,48,48,48,48,90,48,48,48,48,48,90,48,90,48,90,48,90,48,48,90,48,90,48,90,48,90,48,90,48,90,48,48,48,48,48,48,90,90,48,48,90,90,48,90,48,48,90,48,90,48,90,48,48,48,90,48,90,48,90,48,90,48,48,48,48,48,48,90,48,90,48,48,90,0,0,58,59,0,58,58,59,0,59,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,51,52,73,74,75,76,53,0,0,72,72,77,77,0,70,70,0,0,71,71,78,0,0,0,91,92,93,0,0,0,0,61,79,80,61,81,0,0,0,0,0,0,82,83,84,85,86,87,68,0,0,0,68,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,0,0,49,0,49,49,49,0,49],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[1,1],[[]],[[]],[[]],[[1,1],1],[[]],[2,2],[[]],[2,2],[[2,2]],[[2,2]],[2],[[2,2]],[2],[[2,2]],[2],[2],[[1,3],1],[[1,4],1],[[1,5],1],[[1,3],1],[[1,6],1],[[1,4],1],[[1,7],1],[[1,8],1],[[1,3],1],[[1,9],1],[[1,10],1],[[1,11],1],[[1,12],1],[[1,1],1],[[1,6],1],[[1,10],1],[[1,12],1],[[1,13],1],[[1,3],1],[[1,10],1],[[1,4],1],[[1,1],1],[[1,1],1],[[1,7],1],[[1,13],1],[[1,11],1],[[1,8],1],[[1,9],1],[[1,5],1],[[1,6],1],[[1,14],1],[[1,13],1],[[1,4],1],[[1,7],1],[[1,14],1],[[1,8],1],[[1,14],1],[[1,1],1],[[1,5],1],[[1,5],1],[[1,12],1],[[1,13],1],[[1,11],1],[[1,6],1],[[1,10],1],[[1,11],1],[[1,12],1],[[1,9],1],[[1,9],1],[[1,8],1],[[1,7],1],[[1,14],1],[[15,3],15],[[15,12],15],[[15,3],15],[[15,4],15],[[15,9],15],[[15,3],15],[[15,9],15],[[15,15],15],[[15,9],15],[[15,5],15],[[15,8],15],[[15,12],15],[[15,12],15],[[15,4],15],[[15,4],15],[[15,12],15],[[15,15],15],[[15,15],15],[[15,8],15],[[15,5],15],[[15,4],15],[[15,3],15],[[15,8],15],[[15,15],15],[[15,5],15],[[15,8],15],[[15,9],15],[[15,5],15],[2],[[2,2]],[[2,2]],[2],[[1,11]],[[1,5]],[[1,1]],[[1,12]],[[1,13]],[[1,10]],[[1,8]],[[1,6]],[[1,1]],[[1,9]],[[1,14]],[[1,7]],[[1,4]],[[1,3]],[[15,15]],[[15,4]],[[15,3]],[[15,12]],[[15,15]],[[15,8]],[[15,9]],[[15,5]],[2],[2],[[]],[2,2],[[]],[2,2],[[1,16]],[15],[[]],[2,2],[[]],[[]],[2,2],[[]],[[]],[[]],[[]],0,[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[15,15],15],[[15,15],15],[[15,15],15],[[15,15],15],[[1,1]],[[1,1]],[[15,15]],[[15,15]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[15,15],15],[[15,15],15],[[15,15],15],[[15,15],15],[[1,1]],[[1,1]],[[15,15]],[[15,15]],[1,9],[15,9],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[15,15],15],[[15,15],15],[[15,15],15],[[15,15],15],[[1,1]],[[1,1]],[[15,15]],[[15,15]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],17],[[]],[2,2],[1,1],[1,1],[15,15],[15,15],[[]],[[],17],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[15,15],[[17,[15]]]],[[],17],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[15,15],[[17,[15]]]],[[],17],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[15,15],[[17,[15]]]],[9,17],[[],17],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[15,15],[[17,[15]]]],[[]],[[],18],[2,2],[1,1],[15,15],[[]],[[]],[[]],[[1,1],19],[[15,15],19],0,[2,2],[[]],[[]],[2,2],[[]],[2,2],[[],5],[[],5],[[],2],[[],1],[[],15],[[2,2]],[[2,2]],[2],[2],[2],[2],[[2,2]],[[2,2]],[[1,12],1],[[1,3],1],[[1,6],1],[[1,4],1],[[1,14],1],[[1,8],1],[[1,12],1],[[1,4],1],[[1,8],1],[[1,1],1],[[1,8],1],[[1,3],1],[[1,5],1],[[1,1],1],[[1,7],1],[[1,3],1],[[1,7],1],[[1,14],1],[[1,11],1],[[1,11],1],[[1,12],1],[[1,9],1],[[1,7],1],[[1,6],1],[[1,9],1],[[1,6],1],[[1,13],1],[[1,6],1],[[1,11],1],[[1,11],1],[[1,5],1],[[1,10],1],[[1,5],1],[[1,7],1],[[1,13],1],[[1,9],1],[[1,9],1],[[1,8],1],[[1,3],1],[[1,13],1],[[1,10],1],[[1,5],1],[[1,14],1],[[1,10],1],[[1,4],1],[[1,10],1],[[1,13],1],[[1,12],1],[[1,1],1],[[1,14],1],[[1,1],1],[[1,4],1],[[15,5],15],[[15,3],15],[[15,15],15],[[15,9],15],[[15,5],15],[[15,4],15],[[15,12],15],[[15,4],15],[[15,9],15],[[15,8],15],[[15,4],15],[[15,3],15],[[15,8],15],[[15,15],15],[[15,5],15],[[15,8],15],[[15,5],15],[[15,3],15],[[15,4],15],[[15,15],15],[[15,3],15],[[15,12],15],[[15,9],15],[[15,12],15],[[15,15],15],[[15,8],15],[[15,9],15],[[15,12],15],[[2,2]],[2],[[2,2]],[2],[[1,14]],[[1,11]],[[1,10]],[[1,12]],[[1,13]],[[1,4]],[[1,1]],[[1,6]],[[1,9]],[[1,5]],[[1,8]],[[1,1]],[[1,7]],[[1,3]],[[15,15]],[[15,12]],[[15,9]],[[15,8]],[[15,4]],[[15,5]],[[15,15]],[[15,3]],[[]],[[]],[[1,1],1],[[15,15],15],[[]],[[1,1]],[[15,15]],[[]],[[1,1]],[[15,15]],[[],20],[[1,1],20],[[15,15],20],[[]],[[2,2],20],[[1,1],20],[[15,15],20],[[]],[2,2],[[]],[[]],[2,2],[[],21],[[]],[[2,2],2],[2,2],[[]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[]],[[],17],[[],2],[[],2],[[],[[17,[2]]]],[[]],[7,1],[12,1],[9,1],[3,1],[11,1],[13,1],[10,1],[4,1],[5,1],[8,1],[14,1],[[]],[6,1],[15,1],[12,15],[8,15],[3,15],[5,15],[9,15],[[]],[4,15],[[]],[[16,15],1],[16,1],[[],15],[16,1],[[],15],[25,17],[25,[[17,[2]]]],[26,17],[26,[[17,[2]]]],[26,[[17,[1]]]],[26,[[17,[15]]]],[13,17],[13,[[17,[2]]]],[13,[[17,[1]]]],[13,[[17,[15]]]],[14,17],[14,[[17,[2]]]],[6,17],[6,[[17,[2]]]],[11,17],[11,[[17,[2]]]],[11,[[17,[1]]]],[11,[[17,[15]]]],[7,17],[7,[[17,[2]]]],[10,17],[10,[[17,[2]]]],[[]],[[],2],[[16,5],[[17,[1]]]],[5,[[17,[15]]]],[[16,5],[[17,[1]]]],[5,[[17,[15]]]],[[],1],[[],1],[16,1],[[],15],[27,[[24,[2]]]],[27,[[24,[1,28]]]],[27,[[24,[15,28]]]],[[27,5],24],[[27,5],[[24,[2]]]],[[27,5],[[24,[1,28]]]],[[27,5],[[24,[15,28]]]],[12,17],[12,[[17,[2]]]],[12,[[17,[1]]]],[12,[[17,[15]]]],[3,17],[3,[[17,[2]]]],[5,17],[5,[[17,[2]]]],[4,17],[4,[[17,[2]]]],[4,[[17,[1]]]],[4,[[17,[15]]]],[8,17],[8,[[17,[2]]]],[9,17],[9,[[17,[2]]]],[[]],[[1,1],1],[[15,15],15],[[]],[2],[1],[15],[[]],[[],2],0,[[]],0,[[]],[[]],[[]],[[]],[2],[2,2],[2],[[],20],[1,20],[15,20],[[],20],[2,20],[[],20],[2,20],[[],20],[[1,1],20],[[15,15],20],[[],20],[2,20],[[],20],[1,20],[[],20],[2,20],[[],20],[1,20],[15,20],[[],20],[2,20],[1,20],[15,20],[[],20],[1,20],[[],20],[[],20],[[],20],[2,20],[1,20],[15,20],0,[2],[[]],[[1,1],1],[[15,15],15],[[],5],[[],5],[[]],[2,2],[[]],[[]],[2,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],1],[[15,15],15],[[1,1,1],1],[[15,15,15],15],[2],[[2,2]],[2],[2],[2],[[2,2]],[[2,2]],[[2,2]],[[1,3],1],[[1,11],1],[[1,12],1],[[1,1],1],[[1,4],1],[[1,4],1],[[1,13],1],[[1,3],1],[[1,13],1],[[1,10],1],[[1,9],1],[[1,10],1],[[1,14],1],[[1,7],1],[[1,8],1],[[1,8],1],[[1,13],1],[[1,8],1],[[1,6],1],[[1,5],1],[[1,11],1],[[1,8],1],[[1,12],1],[[1,1],1],[[1,12],1],[[1,9],1],[[1,4],1],[[1,1],1],[[1,14],1],[[1,7],1],[[1,10],1],[[1,6],1],[[1,4],1],[[1,7],1],[[1,11],1],[[1,6],1],[[1,14],1],[[1,5],1],[[1,3],1],[[1,11],1],[[1,6],1],[[1,7],1],[[1,14],1],[[1,12],1],[[1,13],1],[[1,3],1],[[1,1],1],[[1,10],1],[[1,5],1],[[1,9],1],[[1,9],1],[[1,5],1],[[15,12],15],[[15,8],15],[[15,9],15],[[15,4],15],[[15,5],15],[[15,5],15],[[15,4],15],[[15,3],15],[[15,9],15],[[15,12],15],[[15,3],15],[[15,12],15],[[15,9],15],[[15,9],15],[[15,12],15],[[15,15],15],[[15,3],15],[[15,5],15],[[15,4],15],[[15,4],15],[[15,8],15],[[15,15],15],[[15,5],15],[[15,15],15],[[15,15],15],[[15,3],15],[[15,8],15],[[15,8],15],[[]],[[2,2,2],2],[[2,2,2],2],[[2,2,2]],[[2,2,2]],[2],[[2,2]],[2],[[2,2]],[[1,11]],[[1,1]],[[1,14]],[[1,7]],[[1,12]],[[1,4]],[[1,8]],[[1,6]],[[1,1]],[[1,5]],[[1,9]],[[1,10]],[[1,3]],[[1,13]],[[15,12]],[[15,3]],[[15,15]],[[15,5]],[[15,4]],[[15,8]],[[15,15]],[[15,9]],[[]],[2],[2],[1,1],[1,1],[15,15],[15,15],[[]],[[]],[[],2],[[16,[30,[5,29]]],1],[[[30,[5,29]]],15],[[]],[2],[2],[1,1],[1,1],[[1,5],1],[[1,5],1],[[15,5],15],[[15,5],15],[[]],[[]],[[],2],[[],1],[[],15],[5,[[17,[1]]]],[5,[[17,[15]]]],[[1,1],[[17,[19]]]],[[15,15],[[17,[19]]]],0,[9],[5],[[2,11]],[[2,26]],[[2,4]],[[2,25]],[[2,8]],[[2,7]],[[2,5]],[[2,6]],[[2,25]],[[2,10]],[[2,12]],[[2,13]],[[2,2]],[[2,3]],[[2,9]],[[2,13]],[[2,6]],[[2,14]],[[2,11]],[[2,4]],[[2,2]],[[2,2]],[[2,26]],[[2,3]],[[2,26]],[[2,5]],[[2,14]],[[2,8]],[[2,26]],[[2,10]],[[2,9]],[[2,7]],[[2,25]],[[2,25]],[[2,2]],[[2,12]],[[1,8],1],[[1,4],1],[[1,5],1],[[1,5],1],[[1,3],1],[[1,12],1],[[1,15],1],[[1,12],1],[[1,9],1],[[1,9],1],[[1,15],1],[[1,4],1],[[1,8],1],[[1,3],1],[[15,15]],[[15,9]],[[15,5]],[[15,4]],[[15,8]],[[15,12]],[[15,8]],[[15,15]],[[15,9]],[[15,12]],[[15,3]],[[15,4]],[[15,3]],[[15,5]],[[2,2],2],[[]],[2,2],[6],[[2,6],2],[[2,5],2],[[]],[[],2],[[],2],[[],1],[[],15],[[],31],[[],32],[[],33],[[],34],0,0,[[]],[2],[2],[2],[[2,2]],[[2,2]],[[2,2]],[2],[[2,2]],[[1,14],1],[[1,11],1],[[1,11],1],[[1,3],1],[[1,4],1],[[1,14],1],[[1,14],1],[[1,3],1],[[1,1],1],[[1,7],1],[[1,13],1],[[1,7],1],[[1,10],1],[[1,9],1],[[1,1],1],[[1,8],1],[[1,6],1],[[1,11],1],[[1,12],1],[[1,9],1],[[1,12],1],[[1,1],1],[[1,3],1],[[1,7],1],[[1,10],1],[[1,1],1],[[1,4],1],[[1,8],1],[[1,4],1],[[1,6],1],[[1,5],1],[[1,5],1],[[1,6],1],[[1,8],1],[[1,5],1],[[1,13],1],[[1,14],1],[[1,13],1],[[1,12],1],[[1,10],1],[[1,11],1],[[1,13],1],[[1,7],1],[[1,4],1],[[1,5],1],[[1,8],1],[[1,9],1],[[1,12],1],[[1,10],1],[[1,3],1],[[1,6],1],[[1,9],1],[[15,3],15],[[15,9],15],[[15,4],15],[[15,9],15],[[15,12],15],[[15,5],15],[[15,15],15],[[15,12],15],[[15,5],15],[[15,3],15],[[15,9],15],[[15,15],15],[[15,4],15],[[15,8],15],[[15,15],15],[[15,3],15],[[15,3],15],[[15,5],15],[[15,12],15],[[15,8],15],[[15,8],15],[[15,4],15],[[15,15],15],[[15,12],15],[[15,4],15],[[15,8],15],[[15,5],15],[[15,9],15],[[2,2]],[2],[[2,2]],[2],[[1,12]],[[1,11]],[[1,14]],[[1,8]],[[1,4]],[[1,1]],[[1,7]],[[1,9]],[[1,1]],[[1,10]],[[1,6]],[[1,5]],[[1,13]],[[1,3]],[[15,5]],[[15,4]],[[15,9]],[[15,15]],[[15,12]],[[15,15]],[[15,3]],[[15,8]],[[]],[5],[5],[[]],[[]],[[]],[2,2],[[]],[2],[1],[15],[[]],[2],[1],[15],[[1,9],1],[[1,9],1],[[15,9],15],[[15,9],15],[[1,9]],[[15,9]],[[1,9],1],[[1,9],1],[[15,9],15],[[15,9],15],[[1,9]],[[15,9]],[1,16],[5],[5],[[]],[[]],[[]],[1,1],[[]],[2,2],[[]],[[]],[2,2],[[]],[2,2],[1,1],[1,1],[15,15],[15,15],[[2,2]],[[2,2]],[[2,2]],[2],[2],[[2,2]],[2],[2],[[1,10],1],[[1,7],1],[[1,5],1],[[1,7],1],[[1,8],1],[[1,1],1],[[1,10],1],[[1,3],1],[[1,9],1],[[1,12],1],[[1,4],1],[[1,12],1],[[1,14],1],[[1,3],1],[[1,3],1],[[1,9],1],[[1,12],1],[[1,13],1],[[1,1],1],[[1,4],1],[[1,8],1],[[1,6],1],[[1,11],1],[[1,6],1],[[1,11],1],[[1,8],1],[[1,11],1],[[1,14],1],[[1,5],1],[[1,7],1],[[1,1],1],[[1,14],1],[[1,12],1],[[1,13],1],[[1,4],1],[[1,11],1],[[1,4],1],[[1,5],1],[[1,14],1],[[1,1],1],[[1,7],1],[[1,10],1],[[1,5],1],[[1,6],1],[[1,9],1],[[1,13],1],[[1,8],1],[[1,6],1],[[1,9],1],[[1,10],1],[[1,3],1],[[1,13],1],[[15,3],15],[[15,12],15],[[15,15],15],[[15,8],15],[[15,9],15],[[15,15],15],[[15,8],15],[[15,5],15],[[15,12],15],[[15,8],15],[[15,5],15],[[15,15],15],[[15,4],15],[[15,8],15],[[15,5],15],[[15,15],15],[[15,4],15],[[15,12],15],[[15,3],15],[[15,9],15],[[15,12],15],[[15,3],15],[[15,9],15],[[15,9],15],[[15,3],15],[[15,5],15],[[15,4],15],[[15,4],15],[[2,2]],[2],[2],[[2,2]],[[1,3]],[[1,1]],[[1,1]],[[1,10]],[[1,11]],[[1,12]],[[1,9]],[[1,13]],[[1,5]],[[1,14]],[[1,7]],[[1,4]],[[1,6]],[[1,8]],[[15,3]],[[15,5]],[[15,4]],[[15,9]],[[15,8]],[[15,15]],[[15,12]],[[15,15]],[[],2],[[],2],[[],1],[[],15],[[]],[[]],[2,2],[[]],[2,2],[[]],[1,[[17,[1]]]],[15,[[17,[1]]]],[1,[[17,[15]]]],[1,[[17,[15]]]],[15,[[17,[15]]]],[1],[15,[[30,[8,29]]]],[1],[15,[[30,[8,29]]]],[[]],[[],[[17,[25]]]],[2,[[17,[25]]]],[1,[[17,[25]]]],[15,[[17,[25]]]],[[],[[17,[26]]]],[2,[[17,[26]]]],[1,[[17,[26]]]],[15,[[17,[26]]]],[[],[[17,[13]]]],[2,[[17,[13]]]],[1,[[17,[13]]]],[15,[[17,[13]]]],[[],[[17,[14]]]],[2,[[17,[14]]]],[[],[[17,[6]]]],[2,[[17,[6]]]],[[],[[17,[11]]]],[2,[[17,[11]]]],[1,[[17,[11]]]],[15,[[17,[11]]]],[[],[[17,[7]]]],[2,[[17,[7]]]],[[],[[17,[10]]]],[2,[[17,[10]]]],[[]],[[]],[[]],[[]],[2],[[]],[[1,5]],[[15,5],[[30,[8,29]]]],[[1,5]],[[15,5],[[30,[8,29]]]],[1,[[30,[8,29]]]],[1,[[30,[8,29]]]],[[1,5],35],[[15,5],35],[[],35],[[],35],[[],35],[[],[[17,[12]]]],[2,[[17,[12]]]],[1,[[17,[12]]]],[15,[[17,[12]]]],[[],[[17,[3]]]],[2,[[17,[3]]]],[[],[[17,[5]]]],[2,[[17,[5]]]],[1],[15,[[30,[5,29]]]],[[],[[17,[4]]]],[2,[[17,[4]]]],[1,[[17,[4]]]],[15,[[17,[4]]]],[[],[[17,[8]]]],[2,[[17,[8]]]],[[],[[17,[9]]]],[2,[[17,[9]]]],[[],5],[[],5],0,[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],36],[[],36],[[],36],[2,2],[5],[5],[[]],[[]],[[],2],[[],1],[[],15],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[16,16],[28,28],[[]],[[]],[[16,16],19],[28,27],[[16,16],20],[[28,28],20],[[16,22],[[24,[23]]]],[[28,22],[[24,[23]]]],[[28,22],[[24,[23]]]],[[]],[[]],[16],[[]],[[]],[[16,16],16],[16,16],[[16,16],[[17,[19]]]],[37],[[],[[17,[1]]]],[[],[[17,[15]]]],[[]],[[]],[[],35],[[],24],[[],24],[[],24],[[],24],[[],36],[[],36],0,0,0,0,[[]],[[],17],[[],17],[25,17],[26,17],[13,17],[14,17],[6,17],[11,17],[7,17],[10,17],[12,17],[3,17],[5,17],[4,17],[8,17],[9,17],[[],[[17,[25]]]],[[],[[17,[26]]]],[[],[[17,[13]]]],[[],[[17,[14]]]],[[],[[17,[6]]]],[[],[[17,[11]]]],[[],[[17,[7]]]],[[],[[17,[10]]]],[[],[[17,[12]]]],[[],[[17,[3]]]],[[],[[17,[5]]]],[[],[[17,[4]]]],[[],[[17,[8]]]],[[],[[17,[9]]]],0,0,0,0,[[]],[[]],[38,27],[[38,38],20],[[38,22],[[24,[23]]]],[[38,22],[[24,[23]]]],[[]],0,[[]],[37],0,[[],35],[[],24],[[],24],[[],36],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[21,21],20],[[],21],[[]],[[21,22],[[24,[23]]]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[],39],[39,17],[[]],[5],[5],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],36],[[],36],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[32,32],[33,33],[34,34],[40,40],[41,41],[[]],[[]],[[]],[[]],[[]],[[]],[31,42],[32,42],[40,42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,17],[32,17],[33,17],[34,17],[40,17],[41,17],[31,17],[32,17],[[],31],[[],40],[[],32],[[],33],[[],41],[[],34],[31],[32],[40],[41],[31,42],[32,42],[40,42],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],0,0,[9,17],[9],[[]],0,0,0,0,0,0,[43,43],[[43,43],43],[43,43],[[43,43],43],[43,43],[43,43],[43,43],[[43,43],43],[[43,43],43],[[43,43],43],[43],[43],[[43,43]],[[43,43]],[[],[[17,[43]]]],[[]],[[]],[[]],[[]],[43,43],[[43,43],[[17,[43]]]],[[43,43],[[17,[43]]]],[[43,43],[[17,[43]]]],[[43,43],[[17,[43]]]],[43,43],[44,44],[[]],[[]],[[43,43],19],[43],[44,27],[[43,43],43],[[43,43],43],[43,43],[[43,43],43],[[43,43],43],[43,43],[43,43],[43,43],[[43,43]],[[43,43]],[43],[43],[[43,43],20],[[44,44],20],[43,43],[[43,22],[[24,[23]]]],[[43,22],[[24,[23]]]],[[44,22],[[24,[23]]]],[[44,22],[[24,[23]]]],[43,43],[[]],[[],43],[[],43],[[]],[25,[[17,[[43,[1]]]]]],[25,[[17,[[43,[11]]]]]],[25,[[17,[[43,[6]]]]]],[25,[[17,[[43,[9]]]]]],[25,[[17,[[43,[4]]]]]],[25,[[17,[[43,[13]]]]]],[25,[[17,[[43,[12]]]]]],[25,[[17,[[43,[5]]]]]],[25,[[17,[[43,[3]]]]]],[25,[[17,[[43,[10]]]]]],[25,[[17,[[43,[7]]]]]],[25,[[17,[[43,[14]]]]]],[25,[[17,[[43,[8]]]]]],[26,[[17,[[43,[11]]]]]],[26,[[17,[[43,[3]]]]]],[26,[[17,[[43,[13]]]]]],[26,[[17,[[43,[14]]]]]],[26,[[17,[[43,[9]]]]]],[26,[[17,[[43,[4]]]]]],[26,[[17,[[43,[6]]]]]],[26,[[17,[[43,[10]]]]]],[26,[[17,[[43,[8]]]]]],[26,[[17,[[43,[5]]]]]],[26,[[17,[[43,[1]]]]]],[26,[[17,[[43,[7]]]]]],[26,[[17,[[43,[12]]]]]],[[],[[17,[[43,[1]]]]]],[13,[[17,[[43,[8]]]]]],[13,[[17,[[43,[11]]]]]],[13,[[17,[[43,[1]]]]]],[13,[[17,[[43,[10]]]]]],[13,[[17,[[43,[13]]]]]],[13,[[17,[[43,[6]]]]]],[13,[[17,[[43,[7]]]]]],[13,[[17,[[43,[5]]]]]],[13,[[17,[[43,[14]]]]]],[13,[[17,[[43,[4]]]]]],[13,[[17,[[43,[12]]]]]],[13,[[17,[[43,[3]]]]]],[13,[[17,[[43,[9]]]]]],[11,[[17,[[43,[4]]]]]],[11,[[17,[[43,[6]]]]]],[11,[[17,[[43,[5]]]]]],[11,[[17,[[43,[3]]]]]],[11,[[17,[[43,[14]]]]]],[11,[[17,[[43,[9]]]]]],[11,[[17,[[43,[12]]]]]],[11,[[17,[[43,[7]]]]]],[11,[[17,[[43,[8]]]]]],[11,[[17,[[43,[11]]]]]],[11,[[17,[[43,[1]]]]]],[11,[[17,[[43,[13]]]]]],[11,[[17,[[43,[10]]]]]],[[],43],[27,[[24,[43,44]]]],[[27,5],[[24,[43,44]]]],[12,[[17,[[43,[8]]]]]],[12,[[17,[[43,[7]]]]]],[12,[[17,[[43,[14]]]]]],[12,[[17,[[43,[6]]]]]],[12,[[17,[[43,[9]]]]]],[12,[[17,[[43,[12]]]]]],[12,[[17,[[43,[13]]]]]],[12,[[17,[[43,[1]]]]]],[12,[[17,[[43,[3]]]]]],[12,[[17,[[43,[4]]]]]],[12,[[17,[[43,[5]]]]]],[12,[[17,[[43,[10]]]]]],[12,[[17,[[43,[11]]]]]],[4,[[17,[[43,[7]]]]]],[4,[[17,[[43,[12]]]]]],[4,[[17,[[43,[10]]]]]],[4,[[17,[[43,[11]]]]]],[4,[[17,[[43,[4]]]]]],[4,[[17,[[43,[6]]]]]],[4,[[17,[[43,[8]]]]]],[4,[[17,[[43,[13]]]]]],[4,[[17,[[43,[14]]]]]],[4,[[17,[[43,[3]]]]]],[4,[[17,[[43,[5]]]]]],[4,[[17,[[43,[1]]]]]],[4,[[17,[[43,[9]]]]]],[43],[[]],[43],[[]],[43,43],[43,43],[43,20],[43,20],[43,20],[43,20],[43,20],[43,43],[[43,43],43],[[43,43],43],[43,43],[[43,43],43],[43,43],[43,43],[[43,43],43],[[43,43]],[[43,43]],[43],[43],[43,43],[43,43],[[],43],[[],43],[43],[[],43],[[43,43],[[17,[19]]]],[[43,11],43],[[43,6],43],[[43,7],43],[[43,9],43],[[43,4],43],[[43,14],43],[[43,11],43],[[43,4],43],[[43,4],43],[[43,6],43],[[43,3],43],[[43,5],43],[[43,7],43],[[43,8],43],[[43,8],43],[[43,11],43],[[43,7],43],[[43,10],43],[[43,6],43],[[43,3],43],[[43,14],43],[[43,3],43],[[43,6],43],[[43,8],43],[[43,10],43],[[43,5],43],[[43,5],43],[[43,9],43],[[43,11],43],[[43,14],43],[[43,6],43],[[43,4],43],[[43,9],43],[[43,3],43],[[43,8],43],[[43,10],43],[[43,5],43],[[43,7],43],[[43,10],43],[[43,14],43],[[43,9],43],[[],43],[[],43],[37],[43,43],[43,43],[[43,43],43],[43,43],[43,43],[43,43],[43,43],[[43,43],43],[[43,43],43],[[43,43],43],[[43,43]],[43],[[43,43]],[43],[43,43],[43],[43],[43,43],[[43,43],43],[[43,43],43],[43,43],[43,43],[[43,43],43],[[43,43],43],[43,43],[43,43],[43],[[43,43]],[[43,43]],[43],[[],43],[[],43],[43],[[]],[[]],[[],35],[[],35],[43,43],[[],24],[[],24],[[],24],[[],24],[[],36],[[],36],[[],43],0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,[[]],0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],17],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[9,17],[[],17],[[],17],[5,17],[5,17],[[],17],[[]],[[]],[[]],[[],18],[[]],[[]],[[]],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,[[]],[[45,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[]],[[],17],[[]],[[]],[[]],[25,17],[26,17],[13,17],[14,17],[6,17],[11,17],[7,17],[10,17],[[]],[[27,5],24],[12,17],[3,17],[5,17],[4,17],[8,17],[9,17],[[]],0,[[]],0,[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[9],[5],[[]],[[]],[6],0,[[]],[[]],[[]],[5],[5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5],[5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[17,[25]]]],[[],[[17,[26]]]],[[],[[17,[13]]]],[[],[[17,[14]]]],[[],[[17,[6]]]],[[],[[17,[11]]]],[[],[[17,[7]]]],[[],[[17,[10]]]],[[]],[[]],[[],35],[[],[[17,[12]]]],[[],[[17,[3]]]],[[],[[17,[5]]]],[[],[[17,[4]]]],[[],[[17,[8]]]],[[],[[17,[9]]]],[[],5],[[],5],[[]],[[],24],[[],24],[[],24],[[],24],[[],36],[[],36],[5],[5],[[]],[[]],[[]],[5],[5],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[],17],[[],17],[25,17],[26,17],[13,17],[14,17],[6,17],[11,17],[7,17],[10,17],[12,17],[3,17],[5,17],[4,17],[8,17],[9,17],[[],[[17,[25]]]],[[],[[17,[26]]]],[[],[[17,[13]]]],[[],[[17,[14]]]],[[],[[17,[6]]]],[[],[[17,[11]]]],[[],[[17,[7]]]],[[],[[17,[10]]]],[[],[[17,[12]]]],[[],[[17,[3]]]],[[],[[17,[5]]]],[[],[[17,[4]]]],[[],[[17,[8]]]],[[],[[17,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],5],[[],5],[[]],[[]],[[],5],[[],5],[5],[[]],[5],[5],[5],[5],[[]],[[]],[[]],[[],5],[[],5],[5],[5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],17],[[],17],[[],17],[[],17],[[],17],[5,17],[5,17],[[],17],0,0,[[],17],[[],17],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[5],[5],[[]],0,0,[9,17],[9],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],20],[[],20],[[]],[[]]],"p":[[3,"BigInt"],[3,"Complex"],[15,"u16"],[15,"u64"],[15,"u32"],[15,"i32"],[15,"i8"],[15,"u8"],[15,"usize"],[15,"isize"],[15,"i64"],[15,"u128"],[15,"i128"],[15,"i16"],[3,"BigUint"],[4,"Sign"],[4,"Option"],[4,"FpCategory"],[4,"Ordering"],[15,"bool"],[3,"ExtendedGcd"],[3,"Formatter"],[3,"Error"],[4,"Result"],[15,"f32"],[15,"f64"],[15,"str"],[3,"ParseBigIntError"],[3,"Global"],[3,"Vec"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"String"],[3,"TypeId"],[3,"Demand"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"RangeFrom"],[3,"RangeStepFrom"],[4,"Bound"],[3,"Ratio"],[3,"ParseRatioError"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Num"],[8,"Float"],[8,"Signed"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"PrimInt"],[8,"Integer"],[8,"NumCast"],[8,"FromPrimitive"],[8,"One"],[8,"Zero"],[8,"Bounded"],[8,"Saturating"],[8,"ToPrimitive"],[8,"ToBigInt"],[8,"ToBigUint"],[8,"AsPrimitive"],[8,"Average"],[8,"Roots"],[8,"Pow"],[8,"FloatConst"],[8,"Inv"],[8,"MulAdd"],[8,"CheckedEuclid"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Euclid"],[8,"MulAddAssign"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"FloatCore"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Real"]]},\
"num_bigint":{"doc":"A Big integer (signed version: <code>BigInt</code>, unsigned version: …","tn":["BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","divides","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","hash","hash","hash","into","into","into","into","is_even","is_even","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","lcm","lcm","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","new","new","not","not","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","provide","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl_assign","shl_assign","shr","shr","shr","shr","shr_assign","shr_assign","sign","signum","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","zero","zero"],"q":["num_bigintd":["A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate Sign value.","","","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","Returns the truncated principal square root of <code>self</code> – …","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","","","","","","","","","","","","","",""],"i":[0,0,15,15,0,15,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,1,1,1,14,14,14,14,1,1,14,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,15,1,14,17,15,1,14,17,1,1,14,14,1,1,14,1,1,14,1,1,14,1,1,14,15,1,14,17,15,1,14,17,15,1,14,1,14,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,15,1,14,17,15,1,1,1,1,1,1,14,14,14,14,14,14,17,17,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,17,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,1,1,14,1,14,1,14,1,14,1,14,1,14,15,1,14,15,1,14,17,1,14,1,14,1,1,14,1,14,1,1,14,1,14,1,14,1,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,15,1,1,14,14,1,14,1,1,1,1,14,14,1,14,1,14,15,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,14,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,1,14,14,1,14,1,1,14,14,1,14,1,1,1,1,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,30,1,14,31,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,15,1,14,17,1,14,1,14,1,1,1,14,1,14,17,1,14,1,14,1,14,15,1,14,17,15,1,14,17,15,1,14,17,1,14],"f":[0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],[[1,2],1],[[1,3],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,5],1],[[1,4],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,8],1],[[1,7],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,10],1],[[1,9],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,12],1],[[1,5],1],[[1,5],1],[[1,12],1],[[1,5],1],[[1,12],1],[[1,8],1],[[1,12],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,13],1],[[1,8],1],[[1,8],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,13],1],[[1,2],1],[[1,13],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,6],1],[[1,13],1],[[1,2],1],[[1,2],1],[[14,9],14],[[14,11],14],[[14,12],14],[[14,12],14],[[14,13],14],[[14,12],14],[[14,12],14],[[14,13],14],[[14,14],14],[[14,13],14],[[14,14],14],[[14,14],14],[[14,14],14],[[14,9],14],[[14,9],14],[[14,9],14],[[14,2],14],[[14,2],14],[[14,3],14],[[14,11],14],[[14,3],14],[[14,3],14],[[14,3],14],[[14,2],14],[[14,2],14],[[14,11],14],[[14,11],14],[[14,13],14],[[1,1]],[[1,1]],[[1,5]],[[1,3]],[[1,4]],[[1,9]],[[1,2]],[[1,8]],[[1,12]],[[1,11]],[[1,13]],[[1,10]],[[1,7]],[[1,6]],[[14,2]],[[14,14]],[[14,14]],[[14,13]],[[14,9]],[[14,11]],[[14,12]],[[14,3]],[[1,15]],[14],[[]],[[]],[[]],[[]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[1,9],[14,9],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[1,1],[14,14],[14,14],[[1,1],[[16,[1]]]],[[1,1],[[16,[1]]]],[[14,14],[[16,[14]]]],[[1,1],[[16,[1]]]],[[1,1],[[16,[1]]]],[[14,14],[[16,[14]]]],[[1,1],[[16,[1]]]],[[1,1],[[16,[1]]]],[[14,14],[[16,[14]]]],[[1,1],[[16,[1]]]],[[1,1],[[16,[1]]]],[[14,14],[[16,[14]]]],[15,15],[1,1],[14,14],[17,17],[[]],[[]],[[]],[[]],[[15,15],18],[[1,1],18],[[14,14],18],[[],1],[[],14],[17,19],[[1,11],1],[[1,4],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,13],1],[[1,3],1],[[1,2],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,8],1],[[1,8],1],[[1,8],1],[[1,5],1],[[1,5],1],[[1,5],1],[[1,10],1],[[1,8],1],[[1,5],1],[[14,13],14],[[14,14],14],[[14,14],14],[[14,12],14],[[14,14],14],[[14,14],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,2],14],[[14,9],14],[[14,3],14],[[14,9],14],[[14,13],14],[[14,2],14],[[14,2],14],[[14,2],14],[[14,3],14],[[14,3],14],[[14,3],14],[[14,13],14],[[14,13],14],[[14,9],14],[[14,9],14],[[1,2]],[[1,7]],[[1,4]],[[1,6]],[[1,13]],[[1,3]],[[1,10]],[[1,1]],[[1,9]],[[1,11]],[[1,12]],[[1,5]],[[1,1]],[[1,8]],[[14,14]],[[14,14]],[[14,11]],[[14,12]],[[14,2]],[[14,3]],[[14,13]],[[14,9]],[[1,1],1],[[14,14],14],[[1,1]],[[14,14]],[[1,1]],[[14,14]],[[1,1],20],[[14,14],20],[[15,15],20],[[1,1],20],[[14,14],20],[[17,17],20],[[15,21],22],[[1,21],22],[[1,21],22],[[1,21],22],[[1,21],22],[[1,21],22],[[1,21],22],[[14,21],22],[[14,21],22],[[14,21],22],[[14,21],22],[[14,21],22],[[14,21],22],[[17,21],22],[[17,21],22],[[]],[10,1],[4,1],[13,1],[12,1],[2,1],[8,1],[9,1],[14,1],[5,1],[[]],[7,1],[6,1],[3,1],[11,1],[2,14],[9,14],[13,14],[11,14],[[]],[12,14],[3,14],[[]],[[15,14],1],[15,1],[[],14],[15,1],[[],14],[23,[[16,[1]]]],[23,[[16,[14]]]],[5,[[16,[1]]]],[5,[[16,[14]]]],[8,[[16,[1]]]],[8,[[16,[14]]]],[[15,13],[[16,[1]]]],[13,[[16,[14]]]],[[15,13],[[16,[1]]]],[13,[[16,[14]]]],[[],1],[[],1],[15,1],[[],14],[19,[[24,[1,17]]]],[19,[[24,[14,17]]]],[[19,13],[[24,[1,17]]]],[[19,13],[[24,[14,17]]]],[2,[[16,[1]]]],[2,[[16,[14]]]],[3,[[16,[1]]]],[3,[[16,[14]]]],[[1,1],1],[[14,14],14],[15],[1],[14],[[]],[[]],[[]],[[]],[1,20],[14,20],[[1,1],20],[[14,14],20],[1,20],[1,20],[14,20],[1,20],[14,20],[1,20],[1,20],[14,20],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1,1],1],[[14,14,14],14],[[15,15],15],[[1,3],1],[[1,9],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,3],1],[[1,3],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,13],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,4],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,3],1],[[1,2],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,8],1],[[1,8],1],[[1,8],1],[[1,5],1],[[1,5],1],[[1,5],1],[[1,10],1],[[1,8],1],[[1,5],1],[[14,9],14],[[14,3],14],[[14,14],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,2],14],[[14,2],14],[[14,9],14],[[14,13],14],[[14,3],14],[[14,2],14],[[14,14],14],[[14,3],14],[[14,14],14],[[14,3],14],[[14,13],14],[[14,12],14],[[14,13],14],[[14,13],14],[[14,14],14],[[14,9],14],[[14,9],14],[[14,2],14],[[1,1]],[[1,5]],[[1,1]],[[1,8]],[[1,12]],[[1,11]],[[1,9]],[[1,7]],[[1,6]],[[1,4]],[[1,13]],[[1,3]],[[1,2]],[[1,10]],[[14,14]],[[14,2]],[[14,13]],[[14,3]],[[14,9]],[[14,11]],[[14,12]],[[14,14]],[15,15],[1,1],[1,1],[14,14],[14,14],[[15,[25,[13]]],1],[[[25,[13]]],14],[1,1],[1,1],[[1,13],1],[[1,13],1],[[14,13],14],[[14,13],14],[[],1],[[],14],[13,[[16,[1]]]],[13,[[16,[14]]]],[[15,15],[[16,[18]]]],[[1,1],[[16,[18]]]],[[14,14],[[16,[18]]]],[[1,14],1],[[1,12],1],[[1,9],1],[[1,9],1],[[1,3],1],[[1,13],1],[[1,13],1],[[1,3],1],[[1,11],1],[[1,2],1],[[1,2],1],[[1,11],1],[[1,14],1],[[1,12],1],[[14,13]],[[14,11]],[[14,13]],[[14,3]],[[14,3]],[[14,9]],[[14,9]],[[14,2]],[[14,2]],[[14,14]],[[14,14]],[[14,12]],[[14,12]],[[14,11]],[[],1],[[],14],[26],[[1,9],1],[[1,11],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,6],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,4],1],[[1,13],1],[[1,13],1],[[1,2],1],[[1,13],1],[[1,5],1],[[1,3],1],[[1,8],1],[[1,3],1],[[1,10],1],[[1,5],1],[[1,5],1],[[1,5],1],[[1,2],1],[[1,8],1],[[1,8],1],[[1,10],1],[[1,3],1],[[1,10],1],[[1,8],1],[[1,1],1],[[1,13],1],[[1,3],1],[[1,2],1],[[1,10],1],[[1,2],1],[[14,11],14],[[14,3],14],[[14,13],14],[[14,14],14],[[14,2],14],[[14,14],14],[[14,2],14],[[14,2],14],[[14,14],14],[[14,12],14],[[14,12],14],[[14,3],14],[[14,3],14],[[14,3],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,12],14],[[14,14],14],[[14,2],14],[[14,11],14],[[14,11],14],[[14,12],14],[[14,9],14],[[14,9],14],[[14,9],14],[[14,9],14],[[14,11],14],[[1,6]],[[1,3]],[[1,11]],[[1,12]],[[1,4]],[[1,8]],[[1,10]],[[1,5]],[[1,1]],[[1,7]],[[1,1]],[[1,9]],[[1,2]],[[1,13]],[[14,14]],[[14,13]],[[14,3]],[[14,14]],[[14,2]],[[14,11]],[[14,9]],[[14,12]],[1],[14],[1],[14],[[1,9],1],[[1,9],1],[[14,9],14],[[14,9],14],[[1,9]],[[14,9]],[[1,9],1],[[1,9],1],[[14,9],14],[[14,9],14],[[1,9]],[[14,9]],[1,15],[1,1],[1,1],[1,1],[14,14],[14,14],[[1,9],1],[[1,8],1],[[1,1],1],[[1,4],1],[[1,1],1],[[1,4],1],[[1,1],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,13],1],[[1,12],1],[[1,12],1],[[1,12],1],[[1,3],1],[[1,2],1],[[1,4],1],[[1,10],1],[[1,10],1],[[1,10],1],[[1,8],1],[[1,8],1],[[1,4],1],[[1,5],1],[[1,12],1],[[1,5],1],[[1,5],1],[[1,11],1],[[1,10],1],[[1,11],1],[[1,6],1],[[1,8],1],[[1,11],1],[[1,11],1],[[1,9],1],[[1,9],1],[[1,9],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,7],1],[[1,6],1],[[1,6],1],[[1,1],1],[[1,5],1],[[1,6],1],[[14,9],14],[[14,11],14],[[14,14],14],[[14,14],14],[[14,12],14],[[14,12],14],[[14,12],14],[[14,11],14],[[14,11],14],[[14,11],14],[[14,9],14],[[14,9],14],[[14,12],14],[[14,14],14],[[14,14],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,3],14],[[14,3],14],[[14,3],14],[[14,2],14],[[14,2],14],[[14,2],14],[[14,13],14],[[14,9],14],[[14,3],14],[[14,2],14],[[1,4]],[[1,7]],[[1,9]],[[1,11]],[[1,1]],[[1,1]],[[1,5]],[[1,8]],[[1,10]],[[1,2]],[[1,12]],[[1,13]],[[1,3]],[[1,6]],[[14,2]],[[14,9]],[[14,11]],[[14,12]],[[14,13]],[[14,14]],[[14,14]],[[14,3]],[[],1],[[],14],[[],[[16,[1]]]],[1,[[16,[1]]]],[14,[[16,[1]]]],[[],[[16,[14]]]],[1,[[16,[14]]]],[1,[[16,[14]]]],[14,[[16,[14]]]],[1],[14,[[25,[12]]]],[1],[14,[[25,[12]]]],[1,[[16,[27]]]],[14,[[16,[27]]]],[1,[[16,[23]]]],[14,[[16,[23]]]],[1,[[16,[5]]]],[14,[[16,[5]]]],[1,[[16,[8]]]],[14,[[16,[8]]]],[[]],[[]],[[]],[[]],[[1,13]],[[14,13],[[25,[12]]]],[[1,13]],[[14,13],[[25,[12]]]],[1,[[25,[12]]]],[1,[[25,[12]]]],[[1,13],28],[[14,13],28],[[],28],[[],28],[[],28],[1,[[16,[2]]]],[14,[[16,[2]]]],[1],[14,[[25,[13]]]],[1,[[16,[3]]]],[14,[[16,[3]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],29],[[],29],[[],29],[[],29],[[],1],[[],14]],"p":[[3,"BigInt"],[15,"u128"],[15,"u64"],[15,"isize"],[15,"i128"],[15,"i16"],[15,"i8"],[15,"i64"],[15,"usize"],[15,"i32"],[15,"u16"],[15,"u8"],[15,"u32"],[3,"BigUint"],[4,"Sign"],[4,"Option"],[3,"ParseBigIntError"],[4,"Ordering"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"f64"],[4,"Result"],[3,"Vec"],[3,"Demand"],[15,"f32"],[3,"String"],[3,"TypeId"],[8,"ToBigInt"],[8,"ToBigUint"]]},\
"num_complex":{"doc":"Complex numbers.","tn":["Complex","Complex32","Complex64","ParseComplexError","acos","acosh","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","arg","as_","asin","asinh","atan","atanh","borrow","borrow","borrow_mut","borrow_mut","cbrt","clone","clone_into","conj","cos","cosh","default","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","exp","expf","fdiv","finv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_polar","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","into","into","inv","inv","inv","is_finite","is_infinite","is_nan","is_normal","is_one","is_zero","l1_norm","ln","log","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm","norm_sqr","one","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powf","powi","powu","product","product","provide","re","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sin","sinh","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","tan","tanh","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":["num_complexd":["A complex number in Cartesian form.","","","","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","Calculate the principal Arg of self.","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of inverse hyperbolic tangent …","","","","","Computes the principal value of the cube root of <code>self</code>.","","","Returns the complex conjugate. i.e. <code>re - i im</code>","Computes the cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Raises a floating point number to the complex power <code>self</code>.","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Convert a polar representation into a complex number.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>1/self</code>","Checks if the given complex number is finite","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Computes the principal value of natural logarithm of <code>self</code>.","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","","","","","","","","","","","","","","","","","","Create a new Complex","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","","Real portion of the complex number","","","","","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Computes the sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","Computes the tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","","","","","","","","","","Convert to polar form (r, theta), such that …","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,9,3,9,3,3,3,3,3,3,3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,9,3,3,3,3,3,3,3,3,3,3,3,3,9,9,3,3,3,3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,9,3,3,3,3,3,3,3,9,3,9,3,9,3,3],"f":[0,0,0,0,[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[3,[0,[1,4]]]],[[3,3]],[[3,[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],3]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[3],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]],[0,[1,5]]]],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[3],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,4,6]]]]],[[3,[[0,[1,4,6]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[],[[3,[7]]]],[[[9,[8]]],10],[[3,[3,[[0,[1,4]]]]]],[[3,[0,[1,4]]]],[3],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],3]],[[[3,[[0,[1,4]]]]]],[[3,3]],[[[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]],[0,[1,5]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[[3,[11]],3],12],[[[9,[11]],9],12],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[13]],14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[[9,[16]],14],15],[[[9,[13]],14],15],[[],[[3,[[0,[1,4]]]]]],[17,[[19,[[3,[[0,[18,4]]]]]]]],[[[0,[1,4]]],[[3,[[0,[1,4]]]]]],[[]],[[]],[20,[[19,[[3,[[0,[21,4]]]]]]]],[22,[[19,[[3,[[0,[21,4]]]]]]]],[23,[[19,[[3,[[0,[21,4]]]]]]]],[24,[[19,[[3,[[0,[21,4]]]]]]]],[25,[[19,[[3,[[0,[21,4]]]]]]]],[26,[[19,[[3,[[0,[21,4]]]]]]]],[27,[[19,[[3,[[0,[21,4]]]]]]]],[28,[[19,[[3,[[0,[21,4]]]]]]]],[[],[[3,[[0,[1,2]]]]]],[10,[[29,[3]]]],[[10,30],[[29,[[3,[[0,[4,1]]]]]]]],[31,[[19,[[3,[[0,[21,4]]]]]]]],[32,[[19,[[3,[[0,[21,4]]]]]]]],[30,[[19,[[3,[[0,[21,4]]]]]]]],[33,[[19,[[3,[[0,[21,4]]]]]]]],[34,[[19,[[3,[[0,[21,4]]]]]]]],[35,[[19,[[3,[[0,[21,4]]]]]]]],[[[3,[36]]]],[[],[[3,[[0,[1,4]]]]]],0,[[]],[[]],[3],[[[3,[[0,[1,4,6]]]]]],[[[3,[[0,[1,4,6]]]]],[[3,[[0,[1,4,6]]]]]],[[[3,[[0,[1,37]]]]],12],[[[3,[[0,[1,37]]]]],12],[[[3,[[0,[1,37]]]]],12],[[[3,[[0,[1,37]]]]],12],[[[3,[[0,[1,4]]]]],12],[[[3,[[0,[1,4]]]]],12],[[[3,[[0,[1,38]]]]],[[0,[1,38]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],3]],[[3,[3,[[0,[1,4]]]]]],[[3,3]],[3],[[3,[0,[1,4]]]],[[3,3,3],[[3,[[0,[1,4,39]]]]]],[[[3,[[0,[1,4,39]]]],[3,[[0,[1,4,39]]]],[3,[[0,[1,4,39]]]]],[[3,[[0,[1,4,39]]]]]],[[[3,[[0,[1,5,40]]]],3,3]],[[[3,[[0,[1,5,40]]]],[3,[[0,[1,5,40]]]],[3,[[0,[1,5,40]]]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]],[0,[1,5]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]]]],[[[3,[[0,[1,4,6]]]]]],[3],[[],3],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[[[3,[[0,[1,4]]]]],[[0,[1,4]]]],[[],[[3,[[0,[1,4]]]]]],[[3,28]],[[3,33]],[[3,[3,[2]]]],[[3,3]],[[[3,[2]],[3,[2]]]],[[[3,[2]],3]],[[3,31]],[[3,31]],[[3,23]],[[3,23]],[[3,20]],[[3,20]],[[[3,[2]],20]],[[[3,[2]],20]],[[3,22]],[[3,22]],[[[3,[2]],22]],[[3,24]],[[3,24]],[[3,30]],[[3,32]],[[[3,[2]],22]],[[3,28]],[[3,35]],[[3,35]],[[3,26]],[[3,26]],[[3,33]],[[3,32]],[[3,25]],[[3,25]],[[3,34]],[[3,34]],[[3,27]],[[3,27]],[[3,30]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,4,6]]]],25],[[3,[[0,[1,4,6]]]]]],[[[3,[[0,[1,4]]]],30],[[3,[[0,[1,4]]]]]],[[],[[3,[[0,[4,1]]]]]],[[],[[3,[[0,[4,1]]]]]],[41],0,[[3,3]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]]]],[3],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[3,[0,[1,4]]]],[[[3,[[0,[1,4]]]],3]],[[3,[3,[[0,[1,4]]]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]],[0,[1,5]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]],[[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[3,3]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],3]],[[3,[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]]]],[[3,[0,[1,4]]]],[3],[[[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]],[0,[1,5]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[[3,[[0,[1,5]]]],[3,[[0,[1,5]]]]]],[[],[[3,[[0,[4,1]]]]]],[[],[[3,[[0,[4,1]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[17,4]]]]],[[19,[20]]]],[[[3,[[0,[17,4]]]]],[[19,[22]]]],[[[3,[[0,[17,4]]]]],[[19,[23]]]],[[[3,[[0,[17,4]]]]],[[19,[24]]]],[[[3,[[0,[17,4]]]]],[[19,[25]]]],[[[3,[[0,[17,4]]]]],[[19,[26]]]],[[[3,[[0,[17,4]]]]],[[19,[27]]]],[[[3,[[0,[17,4]]]]],[[19,[28]]]],[[]],[[[3,[[0,[1,2]]]]]],[[],42],[[],42],[[[3,[[0,[17,4]]]]],[[19,[31]]]],[[[3,[[0,[17,4]]]]],[[19,[32]]]],[[[3,[[0,[17,4]]]]],[[19,[30]]]],[[[3,[[0,[17,4]]]]],[[19,[33]]]],[[[3,[[0,[17,4]]]]],[[19,[34]]]],[[[3,[[0,[17,4]]]]],[[19,[35]]]],[[],29],[[],29],[[],29],[[],29],[[],43],[[],43],[[[3,[[0,[1,4]]]],[0,[1,4]]],[[3,[[0,[1,4]]]]]],[[],[[3,[[0,[1,4]]]]]]],"p":[[8,"Clone"],[8,"Float"],[3,"Complex"],[8,"Num"],[8,"NumAssign"],[8,"Neg"],[8,"Default"],[8,"Error"],[3,"ParseComplexError"],[15,"str"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Display"],[8,"ToPrimitive"],[8,"NumCast"],[4,"Option"],[15,"f32"],[8,"FromPrimitive"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[4,"Result"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Hash"],[8,"FloatCore"],[8,"Signed"],[8,"MulAdd"],[8,"MulAddAssign"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,11,12,12],"n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,11,5,11,5,0,4,4,5,5,0,2,0,2,0,2,0,2,2,5,2,2,5,11,5,0,2,5,0,2,11,5,11,2,2,2,0,2,0,2,0,11,11,2,0,4,2,0,4,4,5,11,5,11,5,11,5,5,5],"f":[0,0,0,0,0,[[1,1],1],[[]],[[1,1],1],[[]],[[[0,[2,3]],[0,[2,3]]],[[0,[2,3]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[]],[[[5,[3]]],[[5,[3]]]],[[]],[[2,2],2],[[]],[[2,2],2],[[]],[[2,2]],[[]],[[2,2]],[[]],[[],6],[[[5,[7]],5],6],[[],5],[[]],[[[5,[8]],9],10],[[]],[[]],[[2,2],2],[[]],0,[[2,2]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[2,2],2],[[]],[[2,2],2],[[]],[[],[[0,[2,3]]]],[[],11],[11,12],[[]],[[4,13],4],[13],[[]],[4,4],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0],"p":[[8,"Average"],[8,"Integer"],[8,"Clone"],[8,"Roots"],[3,"ExtendedGcd"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"IterBinomial"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","t":[3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","end_bound","end_bound","end_bound","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","start_bound","start_bound","start_bound","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["num_iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,6,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,0,0,0,0,0,0,2,3,6,7,2,3,6,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[3,[1]]],[[3,[1]]]],[[[4,[1]]],[[4,[1]]]],[[[5,[1]]],[[5,[1]]]],[[[6,[1]]],[[6,[1]]]],[[[7,[1]]],[[7,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[2,8],[3,8],[6,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[2,9],[3,9],[[],2],[[],6],[[],3],[[],4],[[],7],[[],5],[2],[3],[6],[7],[2,8],[3,8],[6,8],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11]],"p":[[8,"Clone"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[4,"Bound"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"num_rational":{"doc":"Rational numbers","tn":["BigRational","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","denom","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","provide","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_integer","to_owned","to_owned","to_string","to_string","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rational","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Alias for arbitrary precision rationals.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","Rounds towards minus infinity.","Renders as <code>numer/denom</code>. If denom=1, renders as numer.","","","","Returns the fractional part of a number, with division …","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>. Fails if <code>denom</code> is zero.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,13,4,13,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,13,13,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,13,4,13,4,13,4],"f":[0,0,0,0,0,0,[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2,3]]]],4],[[4,[[0,[1,2,3]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[[4,4],4],[4,4],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[0,[6,7]]],[[9,[[4,[[0,[2,3,8,7,1]]]]]]]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,10,11]]]],4],[[9,[[4,[[0,[1,2,10,11]]]]]]]],[[4,4],[[9,[4]]]],[[4,4],[[9,[4]]]],[[[4,[[0,[1,2,10,12]]]],4],[[9,[[4,[[0,[1,2,10,12]]]]]]]],[[[4,[1]]],[[4,[1]]]],[13,13],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],14],[4],[13,15],[[4,4],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[4,4],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],16],[[13,13],16],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[4,17],18],[[[4,[19]],17],18],[[13,17],18],[[13,17],18],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],4],[[]],[[],4],[[]],[20,[[9,[[4,[21]]]]]],[20,[[9,[[4,[22]]]]]],[20,[[9,[[4,[23]]]]]],[20,[[9,[[4,[24]]]]]],[20,[[9,[[4,[25]]]]]],[20,[[9,[[4,[26]]]]]],[20,[[9,[[4,[27]]]]]],[20,[[9,[[4,[28]]]]]],[20,[[9,[[4,[29]]]]]],[20,[[9,[[4,[30]]]]]],[20,[[9,[[4,[31]]]]]],[20,[[9,[[4,[32]]]]]],[20,[[9,[[4,[33]]]]]],[34,[[9,[[4,[21]]]]]],[34,[[9,[[4,[31]]]]]],[34,[[9,[[4,[33]]]]]],[34,[[9,[[4,[29]]]]]],[34,[[9,[[4,[23]]]]]],[34,[[9,[[4,[27]]]]]],[34,[[9,[[4,[30]]]]]],[34,[[9,[[4,[26]]]]]],[34,[[9,[[4,[22]]]]]],[34,[[9,[[4,[32]]]]]],[34,[[9,[[4,[25]]]]]],[34,[[9,[[4,[24]]]]]],[34,[[9,[[4,[28]]]]]],[6,[[9,[35]]]],[31,[[9,[[4,[22]]]]]],[31,[[9,[[4,[28]]]]]],[31,[[9,[[4,[32]]]]]],[31,[[9,[[4,[31]]]]]],[31,[[9,[[4,[24]]]]]],[31,[[9,[[4,[29]]]]]],[31,[[9,[[4,[25]]]]]],[31,[[9,[[4,[30]]]]]],[31,[[9,[[4,[27]]]]]],[31,[[9,[[4,[26]]]]]],[31,[[9,[[4,[33]]]]]],[31,[[9,[[4,[21]]]]]],[31,[[9,[[4,[23]]]]]],[32,[[9,[[4,[31]]]]]],[32,[[9,[[4,[30]]]]]],[32,[[9,[[4,[26]]]]]],[32,[[9,[[4,[23]]]]]],[32,[[9,[[4,[21]]]]]],[32,[[9,[[4,[27]]]]]],[32,[[9,[[4,[33]]]]]],[32,[[9,[[4,[25]]]]]],[32,[[9,[[4,[28]]]]]],[32,[[9,[[4,[29]]]]]],[32,[[9,[[4,[22]]]]]],[32,[[9,[[4,[32]]]]]],[32,[[9,[[4,[24]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[15,[[37,[[4,[[0,[36,1,2]]]],13]]]],[[15,26],[[37,[[4,[[0,[1,2]]]],13]]]],[22,[[9,[[4,[24]]]]]],[22,[[9,[[4,[33]]]]]],[22,[[9,[[4,[27]]]]]],[22,[[9,[[4,[23]]]]]],[22,[[9,[[4,[29]]]]]],[22,[[9,[[4,[31]]]]]],[22,[[9,[[4,[21]]]]]],[22,[[9,[[4,[25]]]]]],[22,[[9,[[4,[22]]]]]],[22,[[9,[[4,[30]]]]]],[22,[[9,[[4,[28]]]]]],[22,[[9,[[4,[26]]]]]],[22,[[9,[[4,[32]]]]]],[24,[[9,[[4,[23]]]]]],[24,[[9,[[4,[30]]]]]],[24,[[9,[[4,[29]]]]]],[24,[[9,[[4,[21]]]]]],[24,[[9,[[4,[24]]]]]],[24,[[9,[[4,[33]]]]]],[24,[[9,[[4,[32]]]]]],[24,[[9,[[4,[27]]]]]],[24,[[9,[[4,[26]]]]]],[24,[[9,[[4,[28]]]]]],[24,[[9,[[4,[31]]]]]],[24,[[9,[[4,[22]]]]]],[24,[[9,[[4,[25]]]]]],[[[4,[[0,[1,2,38]]]]]],[[]],[4],[[]],[4,4],[4,4],[[[4,[[0,[1,2]]]]],16],[[[4,[[0,[1,2,3]]]]],16],[[[4,[[0,[1,2]]]]],16],[[[4,[[0,[1,2,3]]]]],16],[[[4,[[0,[1,2]]]]],16],[[4,4],4],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[4,[[4,[[0,[1,2]]]]]],[4,4],[4,4],[[4,4],4],[4,4],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[4,4],[4,4],[[[0,[1,2]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[],4],[4],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[9,[14]]]],[[[4,[[0,[1,2,[39,[27]]]]]],27],[[4,[[0,[1,2,[39,[27]]]]]]]],[[[4,[[0,[1,2,[39,[33]]]]]],33],[[4,[[0,[1,2,[39,[33]]]]]]]],[[[4,[[0,[1,2,[39,[24]]]]]],32],[[4,[[0,[1,2,[39,[24]]]]]]]],[[4,28],[[4,[[0,[1,2,[39,[26]]]]]]]],[[[4,[[0,[1,2,[39,[26]]]]]],28],[[4,[[0,[1,2,[39,[26]]]]]]]],[[4,32],[[4,[[0,[1,2,[39,[24]]]]]]]],[[[4,[[0,[1,2,[39,[26]]]]]],26],[[4,[[0,[1,2,[39,[26]]]]]]]],[[[4,[[0,[1,2,[39,[24]]]]]],32],[[4,[[0,[1,2,[39,[24]]]]]]]],[[4,32],[[4,[[0,[1,2,[39,[24]]]]]]]],[[[4,[[0,[1,2,[39,[33]]]]]],30],[[4,[[0,[1,2,[39,[33]]]]]]]],[[4,30],[[4,[[0,[1,2,[39,[33]]]]]]]],[[[4,[[0,[1,2,[39,[33]]]]]],30],[[4,[[0,[1,2,[39,[33]]]]]]]],[[4,30],[[4,[[0,[1,2,[39,[33]]]]]]]],[[[4,[[0,[1,2,[39,[29]]]]]],29],[[4,[[0,[1,2,[39,[29]]]]]]]],[[[4,[[0,[1,2,[39,[29]]]]]],21],[[4,[[0,[1,2,[39,[29]]]]]]]],[[4,29],[[4,[[0,[1,2,[39,[29]]]]]]]],[[4,21],[[4,[[0,[1,2,[39,[29]]]]]]]],[[[4,[[0,[1,2,[39,[29]]]]]],29],[[4,[[0,[1,2,[39,[29]]]]]]]],[[4,29],[[4,[[0,[1,2,[39,[29]]]]]]]],[[[4,[[0,[1,2,[39,[27]]]]]],27],[[4,[[0,[1,2,[39,[27]]]]]]]],[[4,27],[[4,[[0,[1,2,[39,[27]]]]]]]],[[4,27],[[4,[[0,[1,2,[39,[27]]]]]]]],[[[4,[[0,[1,2,[39,[26]]]]]],28],[[4,[[0,[1,2,[39,[26]]]]]]]],[[4,25],[[4,[[0,[1,2,[39,[27]]]]]]]],[[[4,[[0,[1,2,[39,[29]]]]]],21],[[4,[[0,[1,2,[39,[29]]]]]]]],[[[4,[[0,[1,2,[39,[26]]]]]],26],[[4,[[0,[1,2,[39,[26]]]]]]]],[[4,26],[[4,[[0,[1,2,[39,[26]]]]]]]],[[[4,[[0,[1,2,[39,[24]]]]]],24],[[4,[[0,[1,2,[39,[24]]]]]]]],[[4,24],[[4,[[0,[1,2,[39,[24]]]]]]]],[[[4,[[0,[1,2,[39,[24]]]]]],24],[[4,[[0,[1,2,[39,[24]]]]]]]],[[4,24],[[4,[[0,[1,2,[39,[24]]]]]]]],[[[4,[[0,[1,2,[39,[33]]]]]],33],[[4,[[0,[1,2,[39,[33]]]]]]]],[[4,33],[[4,[[0,[1,2,[39,[33]]]]]]]],[[[4,[[0,[1,2,[39,[26]]]]]],28],[[4,[[0,[1,2,[39,[26]]]]]]]],[[4,28],[[4,[[0,[1,2,[39,[26]]]]]]]],[[4,26],[[4,[[0,[1,2,[39,[26]]]]]]]],[[4,21],[[4,[[0,[1,2,[39,[29]]]]]]]],[[[4,[[0,[1,2,[39,[27]]]]]],25],[[4,[[0,[1,2,[39,[27]]]]]]]],[[4,25],[[4,[[0,[1,2,[39,[27]]]]]]]],[[4,33],[[4,[[0,[1,2,[39,[33]]]]]]]],[[[4,[[0,[1,2,[39,[27]]]]]],25],[[4,[[0,[1,2,[39,[27]]]]]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[40],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[4,4],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[[4,4],4],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[],41],[[],41],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],37],[[],37],[[],37],[[],37],[[],42],[[],42],[[],[[4,[[0,[1,2]]]]]]],"p":[[8,"Clone"],[8,"Integer"],[8,"Signed"],[3,"Ratio"],[8,"NumAssign"],[8,"FloatCore"],[8,"NumCast"],[8,"Bounded"],[4,"Option"],[8,"CheckedMul"],[8,"CheckedAdd"],[8,"CheckedSub"],[3,"ParseRatioError"],[4,"Ordering"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"f32"],[15,"i8"],[15,"u128"],[3,"BigInt"],[15,"u64"],[15,"i16"],[15,"u32"],[15,"u16"],[15,"i32"],[15,"u8"],[15,"isize"],[15,"i128"],[15,"i64"],[15,"usize"],[15,"f64"],[6,"BigRational"],[8,"FromStr"],[4,"Result"],[8,"Hash"],[8,"Pow"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[2,2,2,2,2,2,2,2,2,2,2,13,2,2,2,4,2,16,2,13,2,2,8,8,8,8,2,8,8,2,3,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,0,0,2,2,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,2,0,0,2,0,0,2,11,11,11,11,11,11,11,2,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","","","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::euclid","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,35,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,35,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,36,37,36,38,0,0,0,0,39,0,11,40,40,40,40,40,40,40,40,40,40,40,40,40,40,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41,41,41,41,41,41,41,0,0,0,41,41,41,41,41,41,41,41,41,42,43,42,42,42,42,42,42,42,42,42,42,43,43,42,42,42,42,43,42,42,42,42,42,43,42,43,42,43,42,43,42,42,43,42,43,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,43,42,42,43,43,42,43,42,42,43,42,43,42,43,42,42,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,42,43,42,42,43,0,0,29,30,0,29,29,30,0,30,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,32,47,48,49,50,51,0,0,52,52,53,53,0,54,54,0,0,55,55,56,0,0,0,57,58,59,0,0,0,0,60,61,62,60,63,0,0,0,0,0,0,64,65,66,67,68,69,70,0,0,0,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,34,0,34,34,34,0,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],28],[[],28],[[],29],[[]],[[]],[[]],[[],30],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[31,29,32]],26],[[12,[[0,[31,29,32]]]]]],[[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]],26],[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[34,34],[[]],[[34,34],34],[[]],[[],28],[[],28],[34,34],[[]]],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[4,"FpCategory"],[15,"bool"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"practical_astronomy_rust":{"doc":"","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,12,11,11,12,12,11,5,12,11,12,12,12,12,11,11,11,5,5,3,3,12,12,11,11,11,11,12,12,12,12,12,11,11,5,5,12,12,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,11,11,5,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,5,5,5,5,5,5,5,5,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,5,11,11,5,5,5,5,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,3,12,11,11,12,11,5,12,11,12,12,12,12,12,12,11,11,11,12,5,5,5,5,5,5,5,4,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["binary","binarydata","comet","cometdata","coordinates","datetime","eclipses","macros","moon","planet","planetdata","sun","types","util","binary_star_orbit","BinaryInfo","axis","borrow","borrow_mut","ecc","epoch_peri","from","get_binary_info_vector","incl","into","long_peri","name","pa_node","period","try_from","try_into","type_id","position_of_elliptical_comet","position_of_parabolic_comet","CometInfoElliptical","CometInfoParabolic","arg_peri","axis","borrow","borrow","borrow_mut","borrow_mut","ecc","epoch","epoch_peri_day","epoch_peri_month","epoch_peri_year","from","from","get_comet_info_elliptical_vector","get_comet_info_parabolic_vector","incl","incl","into","into","name","name","node","node","peri","peri_dist","period","try_from","try_from","try_into","try_into","type_id","type_id","angle_between_two_objects","angle_to_decimal_degrees","atmospheric_refraction","carrington_rotation_number","correct_for_aberration","correct_for_precession","corrections_for_geocentric_parallax","decimal_degrees_to_angle","ecliptic_coordinate_to_equatorial_coordinate","equatorial_coordinate_to_ecliptic_coordinate","equatorial_coordinate_to_galactic_coordinate","equatorial_coordinates_to_horizon_coordinates","galactic_coordinate_to_equatorial_coordinate","heliographic_coordinates","horizon_coordinates_to_equatorial_coordinates","hour_angle_to_right_ascension","mean_obliquity_of_the_ecliptic","nutation_in_ecliptic_longitude_and_obliquity","right_ascension_to_hour_angle","rising_and_setting","selenographic_coordinates_1","selenographic_coordinates_2","civil_date_to_day_number","civil_time_to_decimal_hours","decimal_hours_to_civil_time","get_date_of_easter","greenwich_sidereal_time_to_local_sidereal_time","greenwich_sidereal_time_to_universal_time","local_civil_time_to_universal_time","local_sidereal_time_to_greenwich_sidereal_time","universal_time_to_greenwich_sidereal_time","universal_time_to_local_civil_time","lunar_eclipse_circumstances","lunar_eclipse_occurrence","solar_eclipse_circumstances","solar_eclipse_occurrence","PlDataStruct","angle","borrow","borrow_mut","cd_jd","clone","clone_into","dd_deg","dd_dh","dd_min","dd_sec","degrees","dh_dd","dh_hour","dh_min","dh_sec","dms_dd","e_gst_ut","e_moon_rise","e_moon_rise_l6680","e_moon_rise_l6700","e_moon_set","e_moon_set_l6680","e_moon_set_l6700","e_rs","e_sun_rs","e_sun_rs_l3710","e_twilight","e_twilight_l3710","ec_dec","ec_ra","eccentric_anomaly","eq_alt","eq_az","eq_e_lat","eq_e_long","f_dow","f_part","fract","from","full_moon","gst_lst","gst_ut","ha_ra","hms_dh","hor_dec","hor_ha","iint","into","jdc_day","jdc_month","jdc_year","lct_gday","lct_gmonth","lct_gyear","lct_ut","lint","lst_gst","lunar_eclipse_occurrence","lunar_eclipse_occurrence_l6855","mag_lunar_eclipse","mag_solar_eclipse","mag_solar_eclipse_l7390","moon_dist","moon_hp","moon_lat","moon_long","moon_long_lat_hp","moon_mean_anomaly","moon_phase","moon_rise_az","moon_rise_az_l6680","moon_rise_az_l6700","moon_rise_lc_dmy","moon_rise_lc_dmy_l6680","moon_rise_lc_dmy_l6700","moon_rise_lct","moon_rise_lct_l6680","moon_rise_lct_l6700","moon_set_az","moon_set_az_l6680","moon_set_az_l6700","moon_set_lc_dmy","moon_set_lc_dmy_l6680","moon_set_lc_dmy_l6700","moon_set_lct","moon_set_lct_l6680","moon_set_lct_l6700","moon_size","new_moon","new_moon_full_moon_l6855","nutat_long","nutat_obl","obliq","p_comet_long_lat_dist","parallax_dec","parallax_dec_l2870","parallax_ha","parallax_ha_l2870","planet_coordinates","planet_long_l4685","planet_long_l4735","planet_long_l4810","planet_long_l4945","ra_ha","refract","refract_l3035","rise_set_azimuth_rise","rise_set_azimuth_set","rise_set_local_sidereal_time_rise","rise_set_local_sidereal_time_set","sgn","solar_eclipse_occurrence","solar_eclipse_occurrence_l6855","solve_cubic","sun_dia","sun_dist","sun_e_long","sun_ecc","sun_long","sun_mean_anomaly","sun_peri","sun_true_anomaly","sunrise_az","sunrise_az_l3710","sunrise_lct","sunrise_lct_l3710","sunset_az","sunset_az_l3710","sunset_lct","sunset_lct_l3710","to_owned","true_anomaly","try_from","try_into","twilight_am_lct","twilight_am_lct_l3710","twilight_pm_lct","twilight_pm_lct_l3710","type_id","unwind","unwind_deg","unwind_rad","ut_day_adjust","ut_end_total_lunar_eclipse","ut_end_umbra_lunar_eclipse","ut_first_contact_lunar_eclipse","ut_first_contact_solar_eclipse","ut_first_contact_solar_eclipse_l7390","ut_gst","ut_last_contact_lunar_eclipse","ut_last_contact_solar_eclipse","ut_last_contact_solar_eclipse_l7390","ut_lc_day","ut_lc_month","ut_lc_year","ut_lct","ut_max_lunar_eclipse","ut_max_solar_eclipse","ut_max_solar_eclipse_l7390","ut_start_total_lunar_eclipse","ut_start_umbra_lunar_eclipse","value1","value2","value3","value4","value5","value6","value7","value8","value9","approximate_position_of_moon","moon_dist_ang_diam_hor_parallax","moon_phase","moonrise_and_moonset","precise_position_of_moon","times_of_new_moon_and_full_moon","approximate_position_of_planet","precise_position_of_planet","visual_aspects_of_a_planet","PlanetInfo","axis","borrow","borrow_mut","ecc","from","get_planet_info_vector","incl","into","long","name","node","peri","theta0","tp","try_from","try_into","type_id","v0","approximate_position_of_sun","equation_of_time","morning_and_evening_twilight","precise_position_of_sun","solar_elongation","sun_distance_and_angular_size","sunrise_and_sunset","AngleMeasure","Astronomical","Civil","Degrees","Hours","Nautical","TwilightType","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","is_leap_year","round_f64"],"q":["practical_astronomy_rust","","","","","","","","","","","","","","practical_astronomy_rust::binary","practical_astronomy_rust::binarydata","","","","","","","","","","","","","","","","","practical_astronomy_rust::comet","","practical_astronomy_rust::cometdata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","practical_astronomy_rust::coordinates","","","","","","","","","","","","","","","","","","","","","","practical_astronomy_rust::datetime","","","","","","","","","","practical_astronomy_rust::eclipses","","","","practical_astronomy_rust::macrospractical_astronomy_rust::moon","","","","","","practical_astronomy_rust::planet","","","practical_astronomy_rust::planetdata","","","","","","","","","","","","","","","","","","","practical_astronomy_rust::sun","","","","","","","practical_astronomy_rust::types","","","","","","","","","","","","","","","","","","","","","practical_astronomy_rust::util",""],"d":["","","","","","","","","","","","","","","Calculate orbital data for binary star.","Info about a binary system:","","","","","","Returns the argument unchanged.","Retrieve info about a binary system.","","Calls <code>U::from(self)</code>.","","","","","","","","Calculate position of an elliptical comet.","Calculate position of a parabolic comet.","Info about a comet (elliptical):","Info about a comet (parabolic):","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Retrieve info about a comet (elliptical).","Retrieve info about a comet (parabolic).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Calculate the angle between two celestial objects","Convert an Angle (degrees, minutes, and seconds) to …","Calculate corrected RA/Dec, accounting for atmospheric …","Calculate carrington rotation number for a Greenwich date","Correct ecliptic coordinates for the effects of aberration.","Calculate precession (corrected coordinates between two …","Calculate corrected RA/Dec, accounting for geocentric …","Convert Decimal Degrees to an Angle (degrees, minutes, and …","Convert Ecliptic Coordinates to Equatorial Coordinates","Convert Equatorial Coordinates to Ecliptic Coordinates","Convert Equatorial Coordinates to Galactic Coordinates","Convert Equatorial Coordinates to Horizon Coordinates","Convert Galactic Coordinates to Equatorial Coordinates","Calculate heliographic coordinates for a given Greenwich …","Convert Horizon Coordinates to Equatorial Coordinates","Convert Hour Angle to Right Ascension","Calculate Mean Obliquity of the Ecliptic for a Greenwich …","Calculate nutation for two values: ecliptic longitude and …","Convert Right Ascension to Hour Angle","Rising and setting times","Calculate selenographic (lunar) coordinates (sub-Earth)","Calculate selenographic (lunar) coordinates (sub-Solar)","Calculate day number for a date.","Convert a Civil Time (hours,minutes,seconds) to Decimal …","Convert Decimal Hours to Civil Time","Gets the date of Easter for the year specified.","Convert Greenwich Sidereal Time to Local Sidereal Time","Convert Greenwich Sidereal Time to Universal Time","Convert local Civil Time to Universal Time","Convert Local Sidereal Time to Greenwich Sidereal Time","Convert Universal Time to Greenwich Sidereal Time","Convert Universal Time to local Civil Time","Calculate the circumstances of a lunar eclipse.","Determine if a lunar eclipse is likely to occur.","Calculate the circumstances of a lunar eclipse.","Determine if a solar eclipse is likely to occur.","","Calculate the angle between two celestial objects","","","Convert a Greenwich Date/Civil Date (day,month,year) to …","","","Return Degrees part of Decimal Degrees","Convert Decimal Degrees to Degree-Hours","Return Minutes part of Decimal Degrees","Return Seconds part of Decimal Degrees","Convert W to Degrees","Convert Degree-Hours to Decimal Degrees","Return the hour part of a Decimal Hours","Return the minutes part of a Decimal Hours","Return the seconds part of a Decimal Hours","Convert Degrees Minutes Seconds to Decimal Degrees","Status of conversion of Greenwich Sidereal Time to …","Moonrise calculation status.","Helper function for e_moon_rise()","Helper function for e_moon_rise()","Moonset calculation status.","Helper function for e_moon_set()","Helper function for e_moon_set()","Rise/Set status","Sunrise/Sunset calculation status.","Helper function for e_sun_rs()","Twilight calculation status.","Helper function for e_twilight()","Ecliptic - Declination (degrees)","Ecliptic - Right Ascension (degrees)","Solve Kepler’s equation, and return value of the …","Convert Equatorial Coordinates to Altitude (in decimal …","Convert Equatorial Coordinates to Azimuth (in decimal …","Original macro name: EQElat","Original macro name: EQElong","Convert a Julian Date to Day-of-Week (e.g., Sunday)","Original macro name: Fpart","Original macro name: FRACT","Returns the argument unchanged.","Calculate Julian date of Full Moon.","Convert Greenwich Sidereal Time to Local Sidereal Time","Convert Greenwich Sidereal Time to Universal Time","Convert Hour Angle to Right Ascension","Convert a Civil Time (hours,minutes,seconds) to Decimal …","Convert Horizon Coordinates to Declination (in decimal …","Convert Horizon Coordinates to Hour Angle (in decimal …","Original macro name: IINT","Calls <code>U::from(self)</code>.","Returns the day part of a Julian Date","Returns the month part of a Julian Date","Returns the year part of a Julian Date","Determine Greenwich Day for Local Time","Determine Greenwich Month for Local Time","Determine Greenwich Year for Local Time","Convert Local Civil Time to Universal Time","Original macro name: LINT","Convert Local Sidereal Time to Greenwich Sidereal Time","Determine if a lunar eclipse is likely to occur.","Helper function for lunar_eclipse_occurrence","Calculate magnitude of lunar eclipse.","Calculate magnitude of solar eclipse.","Helper function for mag_solar_eclipse","Calculate distance from the Earth to the Moon (km)","Calculate horizontal parallax for the Moon","Calculate geocentric ecliptic latitude for the Moon","Calculate geocentric ecliptic longitude for the Moon","Calculate longitude, latitude, and horizontal parallax of …","Calculate the Moon’s mean anomaly.","Calculate current phase of Moon.","Local azimuth of moonrise.","Helper function for moon_rise_az","Helper function for moon_rise_az","Local date of moonrise.","Helper function for moon_rise_lc_dmy","Helper function for moon_rise_lc_dmy","Local time of moonrise.","Helper function for moon_rise_lct","Helper function for moon_rise_lct","Local azimuth of moonset.","Helper function for moon_set_az","Helper function for moon_set_az","Local date of moonset.","Helper function for moon_set_lc_dmy","Helper function for moon_set_lc_dmy","Local time of moonset.","Helper function for moon_set_lct","Helper function for moon_set_lct","Calculate the Moon’s angular diameter (degrees)","Calculate Julian date of New Moon.","Helper function for new_moon() and full_moon() “”“","Nutation amount to be added in ecliptic longitude, in …","Nutation of Obliquity","Obliquity of the Ecliptic for a Greenwich Date","Calculate longitude, latitude, and distance of …","Calculate corrected declination in decimal degrees","Helper function for parallax_dec","Calculate corrected hour angle in decimal hours","Helper function for parallax_ha","Calculate several planetary properties.","Helper function for planet_long_lat()","Helper function for planet_long_lat()","Helper function for planet_long_lat()","Helper function for planet_long_lat()","Convert Right Ascension to Hour Angle","Calculate effects of refraction","Helper function for refract","Azimuth of rising, in degrees.","Azimuth of setting, in degrees.","Local sidereal time of rise, in hours.","Local sidereal time of setting, in hours.","Calculate sign of number.","Determine if a solar eclipse is likely to occur.","Helper function for solar_eclipse_occurrence","For W, in radians, return S, also in radians.","Calculate Sun’s angular diameter in decimal degrees","Calculate Sun’s distance from the Earth in astronomical …","Mean ecliptic longitude of the Sun at the epoch","Eccentricity of the Sun-Earth orbit","Calculate Sun’s ecliptic longitude","Calculate the Sun’s mean anomaly.","Longitude of the Sun at perigee","Calculate Sun’s true anomaly, i.e., how much its orbit …","Calculate azimuth of sunrise.","Helper function for sunrise_az()","Calculate local civil time of sunrise.","Helper function for sunrise_lct()","Calculate azimuth of sunset.","Helper function for sunset_az()","Calculate local civil time of sunset.","Helper function for sunset_lct().","","Solve Kepler’s equation, and return value of the true …","","","Calculate morning twilight start, in local time.","Helper function for twilight_am_lct()","Calculate evening twilight end, in local time.","Helper function for twilight_pm_lct()","","Convert angle in radians to equivalent angle in degrees.","Convert angle in degrees to equivalent angle in the range …","Convert angle in radians to equivalent angle in degrees.","Original macro name: UTDayAdjust","Calculate end time of total phase of lunar eclipse (UT)","Calculate end time of umbra phase of lunar eclipse (UT)","Calculate time of first shadow contact for lunar eclipse …","Calculate time of first contact for solar eclipse (UT)","Helper function for ut_first_contact_solar_eclipse","Convert Universal Time to Greenwich Sidereal Time","Calculate time of last shadow contact for lunar eclipse …","Calculate time of last contact for solar eclipse (UT)","Helper function for ut_last_contact_solar_eclipse","Get Local Civil Day for Universal Time","Get Local Civil Month for Universal Time","Get Local Civil Year for Universal Time","Convert Universal Time to Local Civil Time","Calculate time of maximum shadow for lunar eclipse (UT)","Calculate time of maximum shadow for solar eclipse (UT)","Helper function for ut_max_solar_eclipse","Calculate start time of total phase of lunar eclipse (UT)","Calculate start time of umbra phase of lunar eclipse (UT)","","","","","","","","","","Calculate approximate position of the Moon.","Calculate Moon’s distance, angular diameter, and …","Calculate Moon phase and position angle of bright limb.","Calculate date/time of local moonrise and moonset.","Calculate approximate position of the Moon.","Calculate new moon and full moon instances.","Calculate approximate position of a planet.","Calculate precise position of a planet.","Calculate several visual aspects of a planet.","Info about a planet:","","","","","Returns the argument unchanged.","Retrieve info about a planet.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Calculate approximate position of the sun for a local date …","Calculate the equation of time. (The difference between …","Calculate times of morning and evening twilight.","Calculate precise position of the sun for a local date and …","Calculate solar elongation for a celestial body.","Calculate distance to the Sun (in km), and angular size.","Calculate local sunrise and sunset.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Determine if year is a leap year.","Round an f64 primitive to the specified number of decimal …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,0,13,13,13,13,13,13,13,13,13,0,0,0,0,14,15,15,14,15,14,15,15,14,14,14,15,14,0,0,15,14,15,14,15,14,15,14,15,14,15,15,14,15,14,15,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,9,9,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,0,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,10,10,8,8,10,0,10,8,10,8,10,8,10,8,10,8,10,8,10,8,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2,3]],0,0,[[]],[[]],0,0,[[]],[3],0,[[]],0,0,0,0,[[],4],[[],4],[[],5],[[1,1,1,6,7,1,2,2,3]],[[1,1,1,6,7,1,2,2,3]],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[3],[3],0,0,[[]],[[]],0,0,0,0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[1,1,1,1,1,1,1,1,1,1,1,1,3]],[[1,1,1],1],[[1,1,1,1,1,1,3,1,1,7,7,1,2,2,1,1,1,1,1]],[[1,2,2],7],[[1,1,1,1,2,2,1,1,1,1,1,1]],[[1,1,1,1,1,1,1,2,2,1,2,2]],[[1,1,1,1,1,1,3,1,1,1,1,7,7,1,2,2,1,1,1]],[1],[[1,1,1,1,1,1,1,2,2]],[[1,1,1,1,1,1,1,2,2]],[[1,1,1,1,1,1]],[[1,1,1,1,1,1,1]],[[1,1,1,1,1,1]],[[1,1,1,2,2]],[[1,1,1,1,1,1,1]],[[1,1,1,1,1,1,6,7,1,2,2,1]],[[1,2,2],1],[[1,2,2]],[[1,1,1,1,1,1,6,7,1,2,2,1]],[[1,1,1,1,1,1,1,2,2,1,1,1]],[[1,2,2]],[[1,2,2]],[[2,2,2],2],[[1,1,1],1],[1],[2],[[1,1,1,1]],[[1,1,1,1,2,2]],[[1,1,1,6,7,1,2,2]],[[1,1,1,1]],[[1,1,1,1,2,2]],[[1,1,1,6,7,2,2,2]],[[1,2,2,6,7]],[[1,2,2,6,7]],[[1,2,2,6,7,1,1]],[[1,2,2,6,7]],0,[[1,1,1,1,1,1,1,1,1,1,1,1,8],1],[[]],[[]],[[1,2,2],1],[9,9],[[]],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,1],[[1,1,1],1],[[1,1,1,1,2,2],3],[[1,2,2,7,7,1,1],3],[[3,1,1,7,7,1,2,2,1,2,2]],[[1,7,7,1,2,2,1,2,2,1]],[[1,2,2,7,7,1,1],3],[[1,1,1,7,7,1,2,2,1,2,2]],[[1,7,7,1,2,2,1,2,2,1]],[[1,1,1,1,1,1,1,1],3],[[1,2,2,7,7,1,1],3],[[1,2,2,1,1,1]],[[1,2,2,7,7,1,1,10],3],[[1,2,2,1,1,1]],[[1,1,1,1,1,1,1,2,2],1],[[1,1,1,1,1,1,1,2,2],1],[[1,1],1],[[1,1,1,1,1,1,1],1],[[1,1,1,1,1,1,1],1],[[1,1,1,1,1,1,1,2,2],1],[[1,1,1,1,1,1,1,2,2],1],[1,3],[1,1],[1,1],[[]],[[7,7,1,2,2],1],[[1,1,1,1],1],[[1,1,1,1,2,2],1],[[1,1,1,1,1,1,7,7,1,2,2,1],1],[[1,1,1],1],[[1,1,1,1,1,1,1],1],[[1,1,1,1,1,1,1],1],[1,1],[[]],[1,1],[1,2],[1,2],[[1,1,1,7,7,1,2,2],1],[[1,1,1,7,7,1,2,2],2],[[1,1,1,7,7,1,2,2],2],[[1,1,1,7,7,1,2,2],1],[1,1],[[1,1,1,1],1],[[7,7,1,2,2],3],[[1,1]],[[1,2,2,7,7],1],[[1,2,2,7,7,1,1],1],[[1,1,1,2,2,1,1,1,1]],[[1,1,1,7,7,1,2,2],1],[[1,1,1,7,7,1,2,2],1],[[1,1,1,7,7,1,2,2],1],[[1,1,1,7,7,1,2,2],1],[[1,1,1,7,7,1,2,2]],[[1,1,1,7,7,1,2,2],1],[[1,1,1,7,7,1,2,2],1],[[1,2,2,7,7,1,1],1],[[1,7,7,1,2,2,1,1]],[[1,7,7,1,2,2,1,2,2,1]],[[1,2,2,7,7,1,1]],[[1,7,7,1,2,2,1,1]],[[1,7,7,1,2,2,1,2,2,1]],[[1,2,2,7,7,1,1],1],[[1,7,7,1,2,2,1,1]],[[1,7,7,1,2,2,1,2,2,1]],[[1,2,2,7,7,1,1],1],[[1,7,7,1,2,2,1,1]],[[1,7,7,1,2,2,1,2,2,1]],[[1,2,2,7,7,1,1]],[[1,7,7,1,2,2,1,1]],[[1,7,7,1,2,2,1,2,2,1]],[[1,2,2,7,7,1,1],1],[[1,7,7,1,2,2,1,1]],[[1,7,7,1,2,2,1,2,2,1]],[[1,1,1,7,7,1,2,2],1],[[7,7,1,2,2],1],[[1,1]],[[1,2,2],1],[[1,2,2],1],[[1,2,2],1],[[1,1,1,7,7,1,2,2,1,2,2,1,1,1,1]],[[1,1,1,1,1,1,3,1,1,1],1],[[1,1,1,1,1,1]],[[1,1,1,1,1,1,3,1,1,1],1],[[1,1,1,1,1,1]],[[1,1,1,7,7,1,2,2,3]],[[[11,[1]]]],[[[11,[1]],1,1]],[[[11,[1]],1]],[[1,7,[11,[9]]]],[[1,1,1,1,1,1,7,7,1,2,2,1],1],[[1,3,1,1],1],[[1,1,1,1],1],[[1,1,1,1,1,1,1,1],1],[[1,1,1,1,1,1,1,1],1],[[1,1,1,1,1,1,1,1],1],[[1,1,1,1,1,1,1,1],1],[1,1],[[7,7,1,2,2],3],[[1,1]],[1,1],[[1,1,1,7,7,1,2,2],1],[[1,1,1,7,7,1,2,2],1],[[1,2,2],1],[[1,2,2],1],[[1,1,1,7,7,1,2,2],1],[[1,1,1,7,7,1,2,2],1],[[1,2,2],1],[[1,1,1,7,7,1,2,2],1],[[1,2,2,7,7,1,1],1],[[1,2,2,1,1,1]],[[1,2,2,7,7,1,1],1],[[1,2,2,1,1,1]],[[1,2,2,7,7,1,1],1],[[1,2,2,1,1,1]],[[1,2,2,7,7,1,1],1],[[1,2,2,1,1,1]],[[]],[[1,1],1],[[],4],[[],4],[[1,2,2,7,7,1,1,10],1],[[1,2,2,1,1,1]],[[1,2,2,7,7,1,1,10],1],[[1,2,2,1,1,1]],[[],5],[1,1],[1,1],[1,1],[[1,1],1],[[1,2,2,7,7],1],[[1,2,2,7,7],1],[[1,2,2,7,7],1],[[1,2,2,7,7,1,1],1],[[1,1,1,2,2,1,1,1,1]],[[1,1,1,1,2,2],1],[[1,2,2,7,7],1],[[1,2,2,7,7,1,1],1],[[1,1,1,2,2,1,1,1,1]],[[1,1,1,7,7,1,2,2],1],[[1,1,1,7,7,1,2,2],2],[[1,1,1,7,7,1,2,2],2],[[1,1,1,7,7,1,2,2],1],[[1,2,2,7,7],1],[[1,2,2,7,7,1,1],1],[[1,1,1,2,2,1,1,1,1]],[[1,2,2,7,7],1],[[1,2,2,7,7],1],0,0,0,0,0,0,0,0,0,[[1,1,1,6,7,1,2,2]],[[1,1,1,6,7,1,2,2]],[[1,1,1,6,7,1,2,2,3]],[[1,2,2,6,7,1,1]],[[1,1,1,6,7,1,2,2]],[[6,7,1,2,2]],[[1,1,1,6,7,1,2,2,3]],[[1,1,1,6,7,1,2,2,3]],[[1,1,1,6,7,1,2,2,3]],0,0,[[]],[[]],0,[[]],[3],0,[[]],0,0,0,0,0,0,[[],4],[[],4],[[],5],0,[[1,1,1,1,2,2,6,7]],[[1,2,2]],[[1,2,2,6,7,1,1,10]],[[1,1,1,1,2,2,6,7]],[[1,1,1,1,1,1,1,2,2],1],[[1,1,1,1,2,2,6,7]],[[1,2,2,6,7,1,1]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[2,6],[[1,12],1]],"p":[[15,"f64"],[15,"u32"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"bool"],[15,"i32"],[4,"AngleMeasure"],[3,"PlDataStruct"],[4,"TwilightType"],[3,"Vec"],[15,"usize"],[3,"BinaryInfo"],[3,"CometInfoParabolic"],[3,"CometInfoElliptical"],[3,"PlanetInfo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
